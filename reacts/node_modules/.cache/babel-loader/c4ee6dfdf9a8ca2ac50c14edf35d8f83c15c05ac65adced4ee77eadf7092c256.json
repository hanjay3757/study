{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef, useEffect } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\n\n// 직업(job)과 등급(grade) 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// Card 컴포넌트 통합\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const cardRef = useRef(null);\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s'\n    },\n    onClick: onFlip,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e, index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  onDragOver,\n  onDrop,\n  type\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    className: `card-area ${type}`,\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n// 전투 컴포넌트\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty,\n  playerPartyName,\n  enemyPartyName\n}) {\n  _s2();\n  const [isBattling, setIsBattling] = useState(false);\n  const [battleLog, setBattleLog] = useState([]);\n  const logContainerRef = useRef(null); // 로그 컨테이너 ref 추가\n\n  // 로그가 업데이트될 때마다 스크롤 다운\n  useEffect(() => {\n    if (logContainerRef.current) {\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n    }\n  }, [battleLog]); // battleLog가 변경될 때마다 실행\n\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\n  const calculateDamage = (attacker, defender) => {\n    // 크리티컬 확률 (15%)\n    const isCritical = Math.random() < 0.15;\n    // 회피 확률 (10%)\n    const isEvaded = Math.random() < 0.10;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    let damage = Math.max(1, attacker.atk - defender.def);\n    if (isCritical) {\n      damage = Math.floor(damage * 1.5);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n\n  // 로그 메시지 생성 함수 수정\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    const attackerName = isPlayerAttack ? playerPartyName : enemyPartyName;\n    const targetName = isPlayerAttack ? enemyPartyName : playerPartyName;\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${targetName}의 ${target.job}(${target.grade})가 ${attackerName}의 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'player-miss' : 'enemy-miss',\n        attacker: attacker.job,\n        target: target.job,\n        damage: 0\n      };\n    }\n    let message = '';\n    if (damageInfo.isCritical) {\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 치명타 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\n    } else {\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\n    }\n    return {\n      text: message,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'player-critical' : 'player-attack' : damageInfo.isCritical ? 'enemy-critical' : 'enemy-attack',\n      attacker: attacker.job,\n      target: target.job,\n      damage: damageInfo.damage\n    };\n  };\n\n  // 전투 시작 함수\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    const maxTurns = 30; // 최대 턴 수 제한\n\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= maxTurns) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const isPlayerTurn = turn % 2 === 1;\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\n      const defender = isPlayerTurn ? enemyCards : playerCards;\n      setBattleLog(prev => [...prev, {\n        text: `${isPlayerTurn ? playerPartyName : enemyPartyName} 턴 시작!`,\n        type: 'turn-start'\n      }]);\n      for (let card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damageInfo = calculateDamage(card, target);\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\n          setBattleLog(prev => [...prev, createLogMessage(card, target, damageInfo, isPlayerTurn)]);\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n      turn++;\n    }\n\n    // 승패 판정\n    const playerWon = playerCards.some(card => card.hp > 0);\n    const isDraw = turn > maxTurns;\n    setBattleLog(prev => [...prev, {\n      text: isDraw ? '무승부!' : playerWon ? `${playerPartyName}의 승리!` : `${enemyPartyName}의 승리!`,\n      type: isDraw ? 'draw' : playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name player\",\n        children: playerPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vs\",\n        children: \"VS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name enemy\",\n        children: enemyPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-area\",\n        children: enemyParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `enemy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-area\",\n        children: playerParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `player-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startBattle,\n        disabled: isBattling,\n        className: \"battle-button\",\n        children: \"\\uC804\\uD22C \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-counter\",\n        children: [\"\\uD134: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: logContainerRef,\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: [log.type === 'battle-start' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-start-banner\",\n          children: log.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 15\n        }, this), log.type === 'turn-start' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"turn-banner\",\n          children: log.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 15\n        }, this), ['player-attack', 'player-critical', 'enemy-attack', 'enemy-critical', 'player-miss', 'enemy-miss'].includes(log.type) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"battle-action\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `actor ${log.type.startsWith('player') ? 'player' : 'enemy'}`,\n            children: log.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 15\n        }, this), ['victory', 'defeat', 'draw'].includes(log.type) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `battle-result ${log.type}`,\n          children: log.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드 등급 상승 함수 추가\n_s2(Battle, \"+fHqE9fg6FQf2sF/gbn+t0JxHiQ=\");\n_c3 = Battle;\nconst getNextGrade = currentGrade => {\n  const gradeIndex = grade.indexOf(currentGrade);\n  return gradeIndex > 0 ? grade[gradeIndex - 1] : currentGrade; // 더 높은 등급으로\n};\nfunction App() {\n  _s3();\n  const [my, setMy] = useState([]);\n  const [party, setParty] = useState([{\n    job: '전사',\n    grade: 'SSR',\n    isFlipped: false\n  }, {\n    job: '마법사',\n    grade: 'SR',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'S',\n    isFlipped: false\n  }, {\n    job: '전사',\n    grade: 'R',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'H',\n    isFlipped: false\n  }]);\n\n  // 적 파티 상태 추가 - 랜덤하게 생성\n  const [enemyParty] = useState(() => {\n    return Array(5).fill(null).map(() => ({\n      job: jobs[dice(0, 4)],\n      grade: grade[getLuck()],\n      isFlipped: false\n    }));\n  });\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\n\n  // 카드 그룹화 함수\n  const groupCards = cards => {\n    return cards.reduce((acc, card) => {\n      const key = `${card.job}-${card.grade}`;\n      if (!acc[key]) {\n        acc[key] = {\n          ...card,\n          count: 1\n        };\n      } else {\n        acc[key].count++;\n      }\n      return acc;\n    }, {});\n  };\n\n  // 카드 렌더링 함수 수정 - 그룹화된 카드 표시\n  const renderCards = (cards, type) => {\n    const groupedCards = groupCards(cards);\n    return Object.values(groupedCards).map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-stack\",\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        ...card,\n        onFlip: () => {\n          const setFunction = type === 'party' ? setParty : setMy;\n          setFunction(prev => {\n            const key = `${card.job}-${card.grade}`;\n            return prev.map(c => `${c.job}-${c.grade}` === key ? {\n              ...c,\n              isFlipped: !c.isFlipped\n            } : c);\n          });\n        },\n        draggable: true,\n        onDragStart: e => handleDragStart(e, type, index),\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, type, index),\n        index: index\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), card.count > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-count\",\n        children: card.count\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)]\n    }, `${type}-${index}`, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this));\n  };\n\n  // 드래그 시작 핸들러 수정\n  const handleDragStart = (e, sourceType, index) => {\n    const cards = sourceType === 'party' ? party : my;\n    const groupedCards = Object.values(groupCards(cards))[index];\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      type: sourceType,\n      index,\n      job: groupedCards.job,\n      grade: groupedCards.grade\n    }));\n  };\n\n  // 드롭 핸들러 수정\n  const handleDrop = (e, targetType, targetIndex = null) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      const {\n        type: sourceType,\n        job,\n        grade\n      } = JSON.parse(e.dataTransfer.getData('text/plain'));\n      const targetArray = targetType === 'party' ? party : my;\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\n\n      // 파티 최대 인원 체크\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\n        alert('파티 인원이 최대입니다.');\n        return;\n      }\n\n      // 카드 이동 처리\n      const cardToMove = {\n        job,\n        grade,\n        isFlipped: false\n      };\n      if (sourceType === targetType) {\n        // 같은 영역 내 이동은 무시\n        return;\n      }\n\n      // 원본에서 카드 제거\n      setSourceArray(prev => {\n        const firstIndex = prev.findIndex(c => c.job === job && c.grade === grade);\n        if (firstIndex === -1) return prev;\n        const newArray = [...prev];\n        newArray.splice(firstIndex, 1);\n        return newArray;\n      });\n\n      // 대상에 카드 추가\n      setTargetArray(prev => [...prev, cardToMove]);\n    } catch (error) {\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\n    }\n  };\n\n  // 가챠 함수 통합\n  const handleGacha = async (useApi = false) => {\n    setIsGachaAnimating(true);\n    try {\n      let newCard;\n      if (useApi) {\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\n        newCard = response.data;\n      } else {\n        newCard = {\n          job: jobs[dice(0, 4)],\n          grade: grade[getLuck()]\n        };\n      }\n      newCard.isFlipped = true;\n      setMy(prev => [...prev, newCard]);\n      setTimeout(() => {\n        setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n          ...card,\n          isFlipped: false\n        } : card));\n      }, 500);\n    } catch (error) {\n      console.error('가챠 실패:', error);\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\n    } finally {\n      setIsGachaAnimating(false);\n    }\n  };\n\n  // 전체 카드 자동 랭업 함수\n  const autoUpgradeAllCards = type => {\n    const cards = type === 'party' ? party : my;\n    const setCards = type === 'party' ? setParty : setMy;\n\n    // 카드 그룹화\n    const groupedCards = groupCards(cards);\n    const newCards = [];\n\n    // 각 그룹별로 처리\n    Object.values(groupedCards).forEach(card => {\n      const {\n        count,\n        ...cardInfo\n      } = card;\n\n      // 기존 카드 추가\n      const remainingCount = count % 2;\n      for (let i = 0; i < remainingCount; i++) {\n        newCards.push({\n          ...cardInfo\n        });\n      }\n\n      // 랭업 카드 추가\n      const upgradeCount = Math.floor(count / 2);\n      for (let i = 0; i < upgradeCount; i++) {\n        if (cardInfo.grade !== 'SSR') {\n          newCards.push({\n            ...cardInfo,\n            grade: getNextGrade(cardInfo.grade)\n          });\n        } else {\n          newCards.push({\n            ...cardInfo\n          }); // SSR은 그대로 유지\n        }\n      }\n    });\n    setCards(newCards);\n\n    // 결과 메시지 표시\n    const upgradedCount = Math.floor(cards.length - newCards.length);\n    if (upgradedCount > 0) {\n      alert(`${upgradedCount}개의 카드가 상위 등급으로 승급되었습니다!`);\n    } else {\n      alert('승급 가능한 카드가 없습니다.');\n    }\n  };\n\n  // 적 파티 이름 생성을 위한 배열들\n  const enemyPrefixes = ['암흑', '혼돈', '악마', '지옥', '광기', '심연', '그림자', '악령', '죽음', '공포'];\n  const enemySuffixes = ['군단', '부대', '군대', '무리', '집단', '연합', '길드', '클랜', '파티', '팀'];\n\n  // 아군 파티 이름 상태 추가\n  const [partyName, setPartyName] = useState('용사 파티');\n  // 적 파티 이름 상태 추가 (랜덤 생성)\n  const [enemyPartyName] = useState(() => {\n    const prefix = enemyPrefixes[Math.floor(Math.random() * enemyPrefixes.length)];\n    const suffix = enemySuffixes[Math.floor(Math.random() * enemySuffixes.length)];\n    return `${prefix}의 ${suffix}`;\n  });\n\n  // 파티 이름 변경 핸들러\n  const handlePartyNameChange = () => {\n    const newName = prompt('새로운 파티 이름을 입력하세요:', partyName);\n    if (newName && newName.trim()) {\n      setPartyName(newName.trim());\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: partyName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePartyNameChange,\n          className: \"name-edit-button\",\n          children: \"\\uC774\\uB984 \\uBCC0\\uACBD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => autoUpgradeAllCards('party'),\n          className: \"upgrade-button\",\n          children: \"\\uD30C\\uD2F0 \\uCE74\\uB4DC \\uC790\\uB3D9 \\uC2B9\\uAE09\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 565,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, 'party'),\n        type: \"party\",\n        children: renderCards(party, 'party')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 573,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBCF4\\uC720 \\uCE74\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inventory-controls\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => autoUpgradeAllCards('inventory'),\n          className: \"upgrade-button\",\n          children: \"\\uC778\\uBCA4\\uD1A0\\uB9AC \\uCE74\\uB4DC \\uC790\\uB3D9 \\uC2B9\\uAE09\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, 'inventory'),\n        type: \"inventory\",\n        children: renderCards(my, 'inventory')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gacha-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(false),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"\\uB85C\\uCEEC \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(true),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"API \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC804\\uD22C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Battle, {\n        playerParty: party,\n        enemyParty: enemyParty,\n        playerPartyName: partyName,\n        enemyPartyName: enemyPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 619,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 554,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"YO+c3MB1uUAPX2mAZfSGy9u84Ms=\");\n_c4 = App;\nexport default App;\n\n// CSS 추가\nconst styles = `\n.card.merging {\n  animation: merge-glow 0.5s ease-in-out;\n}\n\n@keyframes merge-glow {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\n  }\n  50% {\n    transform: scale(1.1);\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.7);\n  }\n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\n  }\n}\n`;\n\n// 스타일 태그 추가\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","useEffect","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","id","_c2","Battle","playerParty","enemyParty","playerPartyName","enemyPartyName","_s2","isBattling","setIsBattling","battleLog","setBattleLog","logContainerRef","scrollTop","scrollHeight","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","isCritical","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","attackerName","targetName","text","message","startBattle","playerCards","map","isPlayer","enemyCards","turn","maxTurns","some","Promise","resolve","setTimeout","isPlayerTurn","prev","filter","c","find","playerWon","isDraw","disabled","currentTurn","log","includes","startsWith","_c3","getNextGrade","currentGrade","gradeIndex","indexOf","App","_s3","my","setMy","party","setParty","Array","fill","isGachaAnimating","setIsGachaAnimating","groupCards","cards","reduce","acc","key","count","renderCards","groupedCards","Object","values","setFunction","handleDragStart","preventDefault","handleDrop","sourceType","dataTransfer","setData","JSON","stringify","targetType","targetIndex","stopPropagation","parse","getData","targetArray","setSourceArray","setTargetArray","length","alert","cardToMove","firstIndex","findIndex","newArray","splice","error","console","handleGacha","useApi","newCard","response","get","data","idx","autoUpgradeAllCards","setCards","newCards","forEach","cardInfo","remainingCount","i","push","upgradeCount","upgradedCount","enemyPrefixes","enemySuffixes","partyName","setPartyName","prefix","suffix","handlePartyNameChange","newName","prompt","trim","_c4","styles","styleSheet","document","createElement","innerText","head","appendChild","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\t\t\t// axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef, useEffect } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\n\r\n// 직업(job)과 등급(grade) 설정\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// Card 컴포넌트 통합\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\r\n  const cardRef = useRef(null);\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'\r\n      }}\r\n      onClick={onFlip}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      draggable={draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e, index)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역\r\nfunction CardArea({ children, onDragOver, onDrop, type }) {\r\n  return (\r\n    <div \r\n      id='card_area'\r\n      className={`card-area ${type}`}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 전투 컴포넌트\r\nfunction Battle({ playerParty, enemyParty, playerPartyName, enemyPartyName }) {\r\n  const [isBattling, setIsBattling] = useState(false);\r\n  const [battleLog, setBattleLog] = useState([]);\r\n  const logContainerRef = useRef(null); // 로그 컨테이너 ref 추가\r\n\r\n  // 로그가 업데이트될 때마다 스크롤 다운\r\n  useEffect(() => {\r\n    if (logContainerRef.current) {\r\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\r\n    }\r\n  }, [battleLog]); // battleLog가 변경될 때마다 실행\r\n\r\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\r\n  const calculateDamage = (attacker, defender) => {\r\n    // 크리티컬 확률 (15%)\r\n    const isCritical = Math.random() < 0.15;\r\n    // 회피 확률 (10%)\r\n    const isEvaded = Math.random() < 0.10;\r\n\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    let damage = Math.max(1, attacker.atk - defender.def);\r\n    if (isCritical) {\r\n      damage = Math.floor(damage * 1.5);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false };\r\n  };\r\n\r\n  // 로그 메시지 생성 함수 수정\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    const attackerName = isPlayerAttack ? playerPartyName : enemyPartyName;\r\n    const targetName = isPlayerAttack ? enemyPartyName : playerPartyName;\r\n    \r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${targetName}의 ${target.job}(${target.grade})가 ${attackerName}의 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'player-miss' : 'enemy-miss',\r\n        attacker: attacker.job,\r\n        target: target.job,\r\n        damage: 0\r\n      };\r\n    }\r\n\r\n    let message = '';\r\n    if (damageInfo.isCritical) {\r\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 치명타 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\r\n    } else {\r\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\r\n    }\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? \r\n        (damageInfo.isCritical ? 'player-critical' : 'player-attack') : \r\n        (damageInfo.isCritical ? 'enemy-critical' : 'enemy-attack'),\r\n      attacker: attacker.job,\r\n      target: target.job,\r\n      damage: damageInfo.damage\r\n    };\r\n  };\r\n\r\n  // 전투 시작 함수\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    const maxTurns = 30; // 최대 턴 수 제한\r\n\r\n    while (\r\n      playerCards.some(card => card.hp > 0) && \r\n      enemyCards.some(card => card.hp > 0) && \r\n      turn <= maxTurns\r\n    ) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const isPlayerTurn = turn % 2 === 1;\r\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\r\n      const defender = isPlayerTurn ? enemyCards : playerCards;\r\n\r\n      setBattleLog(prev => [...prev, { \r\n        text: `${isPlayerTurn ? playerPartyName : enemyPartyName} 턴 시작!`, \r\n        type: 'turn-start' \r\n      }]);\r\n\r\n      for (let card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damageInfo = calculateDamage(card, target);\r\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n          setBattleLog(prev => [...prev, \r\n            createLogMessage(card, target, damageInfo, isPlayerTurn)\r\n          ]);\r\n\r\n          await new Promise(resolve => setTimeout(resolve, 300));\r\n        }\r\n      }\r\n\r\n      turn++;\r\n    }\r\n\r\n    // 승패 판정\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    const isDraw = turn > maxTurns;\r\n\r\n    setBattleLog(prev => [...prev, { \r\n      text: isDraw ? '무승부!' : (playerWon ? `${playerPartyName}의 승리!` : `${enemyPartyName}의 승리!`),\r\n      type: isDraw ? 'draw' : (playerWon ? 'victory' : 'defeat')\r\n    }]);\r\n    setIsBattling(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-header\">\r\n        <div className=\"party-name player\">{playerPartyName}</div>\r\n        <div className=\"vs\">VS</div>\r\n        <div className=\"party-name enemy\">{enemyPartyName}</div>\r\n      </div>\r\n      <div className=\"battle-field\">\r\n        <div className=\"enemy-area\">\r\n          {enemyParty.map((card, index) => (\r\n            <Card key={`enemy-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n        <div className=\"player-area\">\r\n          {playerParty.map((card, index) => (\r\n            <Card key={`player-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"battle-controls\">\r\n        <button \r\n          onClick={startBattle} \r\n          disabled={isBattling}\r\n          className=\"battle-button\"\r\n        >\r\n          전투 시작\r\n        </button>\r\n        <div className=\"turn-counter\">턴: {currentTurn}</div>\r\n      </div>\r\n\r\n      <div \r\n        ref={logContainerRef} \r\n        className=\"battle-log\"\r\n      >\r\n        {battleLog.map((log, index) => (\r\n          <div \r\n            key={index} \r\n            className={`log-entry ${log.type}`}\r\n          >\r\n            {log.type === 'battle-start' && (\r\n              <div className=\"battle-start-banner\">{log.text}</div>\r\n            )}\r\n            {log.type === 'turn-start' && (\r\n              <div className=\"turn-banner\">{log.text}</div>\r\n            )}\r\n            {['player-attack', 'player-critical', 'enemy-attack', 'enemy-critical', \r\n              'player-miss', 'enemy-miss'].includes(log.type) && (\r\n              <div className=\"battle-action\">\r\n                <span className={`actor ${log.type.startsWith('player') ? 'player' : 'enemy'}`}>\r\n                  {log.text}\r\n                </span>\r\n              </div>\r\n            )}\r\n            {['victory', 'defeat', 'draw'].includes(log.type) && (\r\n              <div className={`battle-result ${log.type}`}>{log.text}</div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드 등급 상승 함수 추가\r\nconst getNextGrade = (currentGrade) => {\r\n  const gradeIndex = grade.indexOf(currentGrade);\r\n  return gradeIndex > 0 ? grade[gradeIndex - 1] : currentGrade; // 더 높은 등급으로\r\n};\r\n\r\nfunction App() {\r\n  const [my, setMy] = useState([]);\r\n  const [party, setParty] = useState([\r\n    { job: '전사', grade: 'SSR', isFlipped: false },\r\n    { job: '마법사', grade: 'SR', isFlipped: false },\r\n    { job: '궁수', grade: 'S', isFlipped: false },\r\n    { job: '전사', grade: 'R', isFlipped: false },\r\n    { job: '궁수', grade: 'H', isFlipped: false }\r\n  ]);\r\n  \r\n  // 적 파티 상태 추가 - 랜덤하게 생성\r\n  const [enemyParty] = useState(() => {\r\n    return Array(5).fill(null).map(() => ({\r\n      job: jobs[dice(0, 4)],\r\n      grade: grade[getLuck()],\r\n      isFlipped: false\r\n    }));\r\n  });\r\n  \r\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\r\n\r\n  // 카드 그룹화 함수\r\n  const groupCards = (cards) => {\r\n    return cards.reduce((acc, card) => {\r\n      const key = `${card.job}-${card.grade}`;\r\n      if (!acc[key]) {\r\n        acc[key] = { ...card, count: 1 };\r\n      } else {\r\n        acc[key].count++;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n  // 카드 렌더링 함수 수정 - 그룹화된 카드 표시\r\n  const renderCards = (cards, type) => {\r\n    const groupedCards = groupCards(cards);\r\n    \r\n    return Object.values(groupedCards).map((card, index) => (\r\n      <div key={`${type}-${index}`} className=\"card-stack\">\r\n        <Card \r\n          {...card}\r\n          onFlip={() => {\r\n            const setFunction = type === 'party' ? setParty : setMy;\r\n            setFunction(prev => {\r\n              const key = `${card.job}-${card.grade}`;\r\n              return prev.map(c => \r\n                `${c.job}-${c.grade}` === key ? \r\n                {...c, isFlipped: !c.isFlipped} : c\r\n              );\r\n            });\r\n          }}\r\n          draggable={true}\r\n          onDragStart={(e) => handleDragStart(e, type, index)}\r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, type, index)}\r\n          index={index}\r\n        />\r\n        {card.count > 1 && (\r\n          <div className=\"card-count\">{card.count}</div>\r\n        )}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  // 드래그 시작 핸들러 수정\r\n  const handleDragStart = (e, sourceType, index) => {\r\n    const cards = sourceType === 'party' ? party : my;\r\n    const groupedCards = Object.values(groupCards(cards))[index];\r\n    e.dataTransfer.setData('text/plain', JSON.stringify({ \r\n      type: sourceType, \r\n      index,\r\n      job: groupedCards.job,\r\n      grade: groupedCards.grade\r\n    }));\r\n  };\r\n\r\n  // 드롭 핸들러 수정\r\n  const handleDrop = (e, targetType, targetIndex = null) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    try {\r\n      const { type: sourceType, job, grade } = JSON.parse(e.dataTransfer.getData('text/plain'));\r\n      const targetArray = targetType === 'party' ? party : my;\r\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\r\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\r\n\r\n      // 파티 최대 인원 체크\r\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\r\n        alert('파티 인원이 최대입니다.');\r\n        return;\r\n      }\r\n\r\n      // 카드 이동 처리\r\n      const cardToMove = { job, grade, isFlipped: false };\r\n      \r\n      if (sourceType === targetType) {\r\n        // 같은 영역 내 이동은 무시\r\n        return;\r\n      }\r\n\r\n      // 원본에서 카드 제거\r\n      setSourceArray(prev => {\r\n        const firstIndex = prev.findIndex(c => c.job === job && c.grade === grade);\r\n        if (firstIndex === -1) return prev;\r\n        const newArray = [...prev];\r\n        newArray.splice(firstIndex, 1);\r\n        return newArray;\r\n      });\r\n\r\n      // 대상에 카드 추가\r\n      setTargetArray(prev => [...prev, cardToMove]);\r\n\r\n    } catch (error) {\r\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\r\n    }\r\n  };\r\n\r\n  // 가챠 함수 통합\r\n  const handleGacha = async (useApi = false) => {\r\n    setIsGachaAnimating(true);\r\n    \r\n    try {\r\n      let newCard;\r\n      if (useApi) {\r\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\r\n        newCard = response.data;\r\n      } else {\r\n        newCard = {\r\n          job: jobs[dice(0, 4)],\r\n          grade: grade[getLuck()]\r\n        };\r\n      }\r\n      \r\n      newCard.isFlipped = true;\r\n      setMy(prev => [...prev, newCard]);\r\n      \r\n      setTimeout(() => {\r\n        setMy(prev => prev.map((card, idx) => \r\n          idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n        ));\r\n      }, 500);\r\n      \r\n    } catch (error) {\r\n      console.error('가챠 실패:', error);\r\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\r\n    } finally {\r\n      setIsGachaAnimating(false);\r\n    }\r\n  };\r\n\r\n  // 전체 카드 자동 랭업 함수\r\n  const autoUpgradeAllCards = (type) => {\r\n    const cards = type === 'party' ? party : my;\r\n    const setCards = type === 'party' ? setParty : setMy;\r\n    \r\n    // 카드 그룹화\r\n    const groupedCards = groupCards(cards);\r\n    const newCards = [];\r\n    \r\n    // 각 그룹별로 처리\r\n    Object.values(groupedCards).forEach(card => {\r\n      const { count, ...cardInfo } = card;\r\n      \r\n      // 기존 카드 추가\r\n      const remainingCount = count % 2;\r\n      for (let i = 0; i < remainingCount; i++) {\r\n        newCards.push({ ...cardInfo });\r\n      }\r\n      \r\n      // 랭업 카드 추가\r\n      const upgradeCount = Math.floor(count / 2);\r\n      for (let i = 0; i < upgradeCount; i++) {\r\n        if (cardInfo.grade !== 'SSR') {\r\n          newCards.push({\r\n            ...cardInfo,\r\n            grade: getNextGrade(cardInfo.grade)\r\n          });\r\n        } else {\r\n          newCards.push({ ...cardInfo }); // SSR은 그대로 유지\r\n        }\r\n      }\r\n    });\r\n    \r\n    setCards(newCards);\r\n    \r\n    // 결과 메시지 표시\r\n    const upgradedCount = Math.floor(cards.length - newCards.length);\r\n    if (upgradedCount > 0) {\r\n      alert(`${upgradedCount}개의 카드가 상위 등급으로 승급되었습니다!`);\r\n    } else {\r\n      alert('승급 가능한 카드가 없습니다.');\r\n    }\r\n  };\r\n\r\n  // 적 파티 이름 생성을 위한 배열들\r\n  const enemyPrefixes = ['암흑', '혼돈', '악마', '지옥', '광기', '심연', '그림자', '악령', '죽음', '공포'];\r\n  const enemySuffixes = ['군단', '부대', '군대', '무리', '집단', '연합', '길드', '클랜', '파티', '팀'];\r\n\r\n  // 아군 파티 이름 상태 추가\r\n  const [partyName, setPartyName] = useState('용사 파티');\r\n  // 적 파티 이름 상태 추가 (랜덤 생성)\r\n  const [enemyPartyName] = useState(() => {\r\n    const prefix = enemyPrefixes[Math.floor(Math.random() * enemyPrefixes.length)];\r\n    const suffix = enemySuffixes[Math.floor(Math.random() * enemySuffixes.length)];\r\n    return `${prefix}의 ${suffix}`;\r\n  });\r\n\r\n  // 파티 이름 변경 핸들러\r\n  const handlePartyNameChange = () => {\r\n    const newName = prompt('새로운 파티 이름을 입력하세요:', partyName);\r\n    if (newName && newName.trim()) {\r\n      setPartyName(newName.trim());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"battle-area\">\r\n        <div className=\"party-header\">\r\n          <h2>{partyName}</h2>\r\n          <button \r\n            onClick={handlePartyNameChange}\r\n            className=\"name-edit-button\"\r\n          >\r\n            이름 변경\r\n          </button>\r\n        </div>\r\n        <div className=\"party-controls\">\r\n          <button \r\n            onClick={() => autoUpgradeAllCards('party')}\r\n            className=\"upgrade-button\"\r\n          >\r\n            파티 카드 자동 승급\r\n          </button>\r\n        </div>\r\n        <CardArea \r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, 'party')}\r\n          type=\"party\"\r\n        >\r\n          {renderCards(party, 'party')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"inventory\">\r\n        <h2>보유 카드</h2>\r\n        <div className=\"inventory-controls\">\r\n          <button \r\n            onClick={() => autoUpgradeAllCards('inventory')}\r\n            className=\"upgrade-button\"\r\n          >\r\n            인벤토리 카드 자동 승급\r\n          </button>\r\n        </div>\r\n        <CardArea \r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, 'inventory')}\r\n          type=\"inventory\"\r\n        >\r\n          {renderCards(my, 'inventory')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"gacha-area\">\r\n        <h2>가챠</h2>\r\n        <button \r\n          onClick={() => handleGacha(false)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          로컬 가챠\r\n        </button>\r\n        <button \r\n          onClick={() => handleGacha(true)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          API 가챠\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"battle-section\">\r\n        <h2>전투</h2>\r\n        <Battle \r\n          playerParty={party} \r\n          enemyParty={enemyParty}\r\n          playerPartyName={partyName}\r\n          enemyPartyName={enemyPartyName}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// CSS 추가\r\nconst styles = `\r\n.card.merging {\r\n  animation: merge-glow 0.5s ease-in-out;\r\n}\r\n\r\n@keyframes merge-glow {\r\n  0% {\r\n    transform: scale(1);\r\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\r\n  }\r\n  50% {\r\n    transform: scale(1.1);\r\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.7);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\r\n  }\r\n}\r\n`;\r\n\r\n// 스타일 태그 추가\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.innerText = styles;\r\ndocument.head.appendChild(styleSheet);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}