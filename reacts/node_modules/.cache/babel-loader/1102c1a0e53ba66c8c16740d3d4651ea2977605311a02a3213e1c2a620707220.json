{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\n\n// 직업(job)과 등급(grade) 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// Card 컴포넌트 통합\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  }); // 카드 회전 값 설정\n  const cardRef = useRef(null); // 카드에 대한 참조 설정\n\n  // 마우스 이동에 따른 카드 회전 처리\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n\n  // 마우스가 카드에서 벗어날 때 회전 값 초기화\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s' // 카드의 회전 애니메이션 설정\n    },\n    onClick: onFlip,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e, index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  onDragOver,\n  onDrop,\n  type\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    className: `card-area ${type}` // type에 따라 카드 영역 스타일 변경\n    ,\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e),\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n// 전투 컴포넌트\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty,\n  playerPartyName,\n  enemyPartyName\n}) {\n  _s2();\n  const [isBattling, setIsBattling] = useState(false); // 전투 상태 관리\n  const [battleLog, setBattleLog] = useState([]); // 전투 로그 관리\n  const [currentTurn] = useState(0); // 현재 턴 상태\n\n  // 카드의 스탯 계산 함수\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp) // 최대 HP 계산\n    };\n  };\n\n  // 데미지 계산 함수 (크리티컬, 회피 시스템 포함)\n  const calculateDamage = (attacker, defender) => {\n    const isCritical = Math.random() < 0.15; // 15% 확률로 크리티컬\n    const isEvaded = Math.random() < 0.10; // 10% 확률로 회피\n\n    if (isEvaded) {\n      // 회피된 경우\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    let damage = Math.max(1, attacker.atk - defender.def); // 최소 1의 데미지를 보장\n    if (isCritical) {\n      // 크리티컬 데미지 계산\n      damage = Math.floor(damage * 1.5);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n\n  // 로그 메시지 생성 함수 (크리티컬, 회피 포함)\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    const attackerName = isPlayerAttack ? playerPartyName : enemyPartyName;\n    const targetName = isPlayerAttack ? enemyPartyName : playerPartyName;\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${targetName}의 ${target.job}(${target.grade})가 ${attackerName}의 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'player-miss' : 'enemy-miss',\n        attacker: attacker.job,\n        target: target.job,\n        damage: 0\n      };\n    }\n    let message = '';\n    if (damageInfo.isCritical) {\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 치명타 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\n    } else {\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\n    }\n    return {\n      text: message,\n      type: isPlayerAttack ? 'player-attack' : 'enemy-attack',\n      attacker: attacker.job,\n      target: target.job,\n      damage: damageInfo.damage\n    };\n  };\n\n  // 전투 시작 함수\n  const startBattle = () => {\n    setIsBattling(true);\n    setBattleLog([]); // 전투 시작 시 로그 초기화\n\n    // 초기화\n    let playerPartyState = [...playerParty];\n    let enemyPartyState = [...enemyParty];\n\n    // 전투 진행\n    const battleInterval = setInterval(() => {\n      // 플레이어와 적이 교대로 공격을 진행\n      const playerAttack = playerPartyState[currentTurn];\n      const enemyAttack = enemyPartyState[currentTurn];\n\n      // 데미지 계산\n      const playerDamage = calculateDamage(playerAttack, enemyAttack);\n      const enemyDamage = calculateDamage(enemyAttack, playerAttack);\n\n      // 로그 업데이트\n      setBattleLog(prevLog => [...prevLog, createLogMessage(playerAttack, enemyAttack, playerDamage, true), createLogMessage(enemyAttack, playerAttack, enemyDamage, false)]);\n\n      // HP 업데이트\n      enemyAttack.hp -= playerDamage.damage;\n      playerAttack.hp -= enemyDamage.damage;\n\n      // 턴 이동\n      currentTurn = (currentTurn + 1) % playerPartyState.length;\n\n      // 전투 종료 조건 (한쪽의 HP가 0 이하일 때)\n      if (playerPartyState.every(card => card.hp <= 0) || enemyPartyState.every(card => card.hp <= 0)) {\n        clearInterval(battleInterval);\n        setIsBattling(false); // 전투 종료\n      }\n    }, 1000); // 1초마다 턴 진행\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isBattling ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startBattle,\n      children: \"\\uC804\\uD22C \\uC2DC\\uC791\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }, this) // 전투 시작 버튼\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n}\n_s2(Battle, \"KHONQ2YIQtDiwgpKid5ilZRsvuw=\");\n_c3 = Battle;\nexport default Battle;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");","map":{"version":3,"names":["axios","React","useState","useRef","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","id","_c2","Battle","playerParty","enemyParty","playerPartyName","enemyPartyName","_s2","isBattling","setIsBattling","battleLog","setBattleLog","currentTurn","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","isCritical","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","attackerName","targetName","text","message","startBattle","playerPartyState","enemyPartyState","battleInterval","setInterval","playerAttack","enemyAttack","playerDamage","enemyDamage","prevLog","length","every","clearInterval","map","log","_c3","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios'; // axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\n\r\n// 직업(job)과 등급(grade) 설정\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// Card 컴포넌트 통합\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 }); // 카드 회전 값 설정\r\n  const cardRef = useRef(null);  // 카드에 대한 참조 설정\r\n\r\n  // 마우스 이동에 따른 카드 회전 처리\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  // 마우스가 카드에서 벗어날 때 회전 값 초기화\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'  // 카드의 회전 애니메이션 설정\r\n      }}\r\n      onClick={onFlip}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      draggable={draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e, index)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div> {/* 직업 이름 표시 */}\r\n          <div className=\"card-grade\">{grade}</div> {/* 카드 등급 표시 */}\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div> {/* 카드 뒷면 디자인 */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역\r\nfunction CardArea({ children, onDragOver, onDrop, type }) {\r\n  return (\r\n    <div \r\n      id='card_area'\r\n      className={`card-area ${type}`}  // type에 따라 카드 영역 스타일 변경\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e)}\r\n    >\r\n      {children} {/* 자식 컴포넌트들 (카드들) 렌더링 */}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 전투 컴포넌트\r\nfunction Battle({ playerParty, enemyParty, playerPartyName, enemyPartyName }) {\r\n  const [isBattling, setIsBattling] = useState(false);  // 전투 상태 관리\r\n  const [battleLog, setBattleLog] = useState([]);  // 전투 로그 관리\r\n  const [currentTurn] = useState(0);  // 현재 턴 상태\r\n\r\n  // 카드의 스탯 계산 함수\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp) // 최대 HP 계산\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수 (크리티컬, 회피 시스템 포함)\r\n  const calculateDamage = (attacker, defender) => {\r\n    const isCritical = Math.random() < 0.15;  // 15% 확률로 크리티컬\r\n    const isEvaded = Math.random() < 0.10;  // 10% 확률로 회피\r\n\r\n    if (isEvaded) {  // 회피된 경우\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    let damage = Math.max(1, attacker.atk - defender.def);  // 최소 1의 데미지를 보장\r\n    if (isCritical) {  // 크리티컬 데미지 계산\r\n      damage = Math.floor(damage * 1.5);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false };\r\n  };\r\n\r\n  // 로그 메시지 생성 함수 (크리티컬, 회피 포함)\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    const attackerName = isPlayerAttack ? playerPartyName : enemyPartyName;\r\n    const targetName = isPlayerAttack ? enemyPartyName : playerPartyName;\r\n    \r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${targetName}의 ${target.job}(${target.grade})가 ${attackerName}의 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'player-miss' : 'enemy-miss',\r\n        attacker: attacker.job,\r\n        target: target.job,\r\n        damage: 0\r\n      };\r\n    }\r\n\r\n    let message = '';\r\n    if (damageInfo.isCritical) {\r\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 치명타 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\r\n    } else {\r\n      message = `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`;\r\n    }\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? 'player-attack' : 'enemy-attack',\r\n      attacker: attacker.job,\r\n      target: target.job,\r\n      damage: damageInfo.damage\r\n    };\r\n  };\r\n\r\n  // 전투 시작 함수\r\n  const startBattle = () => {\r\n    setIsBattling(true);\r\n    setBattleLog([]);  // 전투 시작 시 로그 초기화\r\n\r\n    // 초기화\r\n    let playerPartyState = [...playerParty];\r\n    let enemyPartyState = [...enemyParty];\r\n\r\n    // 전투 진행\r\n    const battleInterval = setInterval(() => {\r\n      // 플레이어와 적이 교대로 공격을 진행\r\n      const playerAttack = playerPartyState[currentTurn];\r\n      const enemyAttack = enemyPartyState[currentTurn];\r\n      \r\n      // 데미지 계산\r\n      const playerDamage = calculateDamage(playerAttack, enemyAttack);\r\n      const enemyDamage = calculateDamage(enemyAttack, playerAttack);\r\n\r\n      // 로그 업데이트\r\n      setBattleLog((prevLog) => [\r\n        ...prevLog,\r\n        createLogMessage(playerAttack, enemyAttack, playerDamage, true),\r\n        createLogMessage(enemyAttack, playerAttack, enemyDamage, false)\r\n      ]);\r\n\r\n      // HP 업데이트\r\n      enemyAttack.hp -= playerDamage.damage;\r\n      playerAttack.hp -= enemyDamage.damage;\r\n\r\n      // 턴 이동\r\n      currentTurn = (currentTurn + 1) % playerPartyState.length;\r\n      \r\n      // 전투 종료 조건 (한쪽의 HP가 0 이하일 때)\r\n      if (playerPartyState.every(card => card.hp <= 0) || enemyPartyState.every(card => card.hp <= 0)) {\r\n        clearInterval(battleInterval);\r\n        setIsBattling(false); // 전투 종료\r\n      }\r\n    }, 1000);  // 1초마다 턴 진행\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isBattling ? (\r\n        <div className=\"battle-log\">\r\n          {battleLog.map((log, index) => (\r\n            <div key={index} className={`log-entry ${log.type}`}>\r\n              {log.text}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <button onClick={startBattle}>전투 시작</button> // 전투 시작 버튼\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Battle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}