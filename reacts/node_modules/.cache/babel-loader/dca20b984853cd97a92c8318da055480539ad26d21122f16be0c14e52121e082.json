{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\nimport warrior from './images/전사.webp';\nimport mage from './images/마법사.webp';\nimport archer from './images/궁수.webp';\nimport thief from './images/도적.webp';\nimport priest from './images/사제.webp';\n\n// 직업(job)과 등급(grade) 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// 카드 컴포넌트 (각 카드의 UI와 효과를 관리)\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  }); // 카드 회전 상태\n  const cardRef = useRef(null); // 카드 참조\n\n  // 마우스 이동 시 카드가 3D로 회전하는 효과를 처리하는 함수\n  const handleMouseMove = e => {\n    if (!cardRef.current) return; // isFlipped 체크 제거\n\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect(); // 카드의 위치와 크기 정보를 가져옴\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n\n    // 마우스 위치에 따라 카드의 회전 각도를 계산\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n\n  // 마우스가 카드에서 벗어나면 회전 효과를 리셋하는 함수\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s',\n      // 3D 회전 효과\n      backgroundImage: `url(${jobImages[job]})`\n    },\n    onClick: onFlip // 카드 클릭 시 뒤집기\n    ,\n    onMouseMove: handleMouseMove // 마우스 이동 시 회전\n    ,\n    onMouseLeave: handleMouseLeave // 마우스가 카드에서 벗어나면 리셋\n    ,\n    draggable: true,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n// 전투 컴포넌트\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty\n}) {\n  _s2();\n  const [battleLog, setBattleLog] = useState([]); // 전투 로그\n  const [currentTurn, setCurrentTurn] = useState(1); // 현재 턴\n  const [isBattling, setIsBattling] = useState(false); // 전투 진행 여부\n\n  // 카드의 스탯 계산 함수 (등급과 직업에 따른 스탯 계산)\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 25,\n        def: 20\n      },\n      SR: {\n        hp: 80,\n        atk: 20,\n        def: 15\n      },\n      S: {\n        hp: 60,\n        atk: 15,\n        def: 12\n      },\n      R: {\n        hp: 50,\n        atk: 12,\n        def: 10\n      },\n      H: {\n        hp: 40,\n        atk: 10,\n        def: 8\n      },\n      N: {\n        hp: 30,\n        atk: 8,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.3,\n        atk: 1.0,\n        def: 1.2\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.0,\n        atk: 0.8,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n\n  // 전투 시작 함수\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog(['전투 시작!']); // 전투 시작 로그\n\n    // 플레이어와 적 카드의 스탯 계산\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0)) {\n      await new Promise(resolve => setTimeout(resolve, 1000)); // 1초 대기\n\n      // 공격자와 방어자 설정 (홀수 턴은 플레이어, 짝수 턴은 적)\n      const attacker = turn % 2 === 1 ? playerCards : enemyCards;\n      const defender = turn % 2 === 1 ? enemyCards : playerCards;\n\n      // 공격 실행\n      for (let card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damage = Math.max(1, card.atk - target.def); // 데미지 계산 (방어력 고려)\n          target.hp = Math.max(0, target.hp - damage); // HP 차감\n\n          setBattleLog(prev => [...prev, `${card.job}(${card.grade})가 ${target.job}(${target.grade})에게 ${damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`]);\n        }\n      }\n      setCurrentTurn(turn); // 현재 턴 갱신\n      turn++;\n    }\n\n    // 승패 판정\n    const playerWon = playerCards.some(card => card.hp > 0);\n    setBattleLog(prev => [...prev, playerWon ? '플레이어의 승리!' : '적의 승리!']);\n    setIsBattling(false); // 전투 종료\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-area\",\n        children: enemyParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `enemy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-area\",\n        children: playerParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `player-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startBattle,\n        disabled: isBattling,\n        className: \"battle-button\",\n        children: \"\\uC804\\uD22C \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-counter\",\n        children: [\"\\uD134: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"log-entry\",\n        children: log\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s2(Battle, \"mpltea7vom6N9mYm3cZdMBjWO7Y=\");\n_c3 = Battle;\nfunction App() {\n  _s3();\n  const [my, setMy] = useState([]); // 보유 카드\n  const [party, setParty] = useState([\n  // 기본 파티 설정\n  {\n    job: '전사',\n    grade: 'SSR',\n    isFlipped: false\n  }, {\n    job: '마법사',\n    grade: 'SR',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'S',\n    isFlipped: false\n  }, {\n    job: '전사',\n    grade: 'R',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'H',\n    isFlipped: false\n  }]);\n\n  // 적 파티 생성 - 랜덤하게 생성\n  const [enemyParty] = useState(() => {\n    const enemies = [];\n    for (let i = 0; i < 5; i++) {\n      const j = jobs[dice(0, 4)];\n      const g = grade[getLuck()];\n      enemies.push({\n        job: j,\n        grade: g,\n        isFlipped: false\n      });\n    }\n    return enemies;\n  });\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false); // 가챠 애니메이션 상태\n\n  // 가챠 연출과 카드 추가 함수\n  async function gacha() {\n    setIsGachaAnimating(true);\n    const j = jobs[dice(0, 4)]; // 랜덤 직업\n    const g = grade[getLuck()]; // 랜덤 등급\n\n    await new Promise(resolve => setTimeout(resolve, 1000)); // 1초 딜레이\n\n    const newCard = {\n      job: j,\n      grade: g,\n      isFlipped: true\n    }; // 새로운 카드 추가\n    setMy(prev => [...prev, newCard]);\n\n    // 카드 뒤집기 애니메이션\n    setTimeout(() => {\n      setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n        ...card,\n        isFlipped: false\n      } : card));\n    }, 500); // 0.5초 후 뒤집기\n\n    setIsGachaAnimating(false); // 가챠 애니메이션 종료\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD30C\\uD2F0 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        children: party.map((character, index) => /*#__PURE__*/_jsxDEV(Card, {\n          job: character.job,\n          grade: character.grade,\n          isFlipped: character.isFlipped,\n          onFlip: () => {\n            setParty(prev => prev.map((card, idx) => idx === index ? {\n              ...card,\n              isFlipped: !card.isFlipped\n            } : card));\n          }\n        }, `party-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gacha-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: gacha,\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"\\uCE74\\uB4DC \\uBF51\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBCF4\\uC720 \\uCE74\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        children: my.map((character, index) => /*#__PURE__*/_jsxDEV(Card, {\n          job: character.job,\n          grade: character.grade,\n          isFlipped: character.isFlipped,\n          onFlip: () => {\n            setMy(prev => prev.map((card, idx) => idx === index ? {\n              ...card,\n              isFlipped: !card.isFlipped\n            } : card));\n          }\n        }, `my-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC804\\uD22C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Battle, {\n        playerParty: party,\n        enemyParty: enemyParty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"tOVWKAmev8PB1gs3eaJC6P5EhvM=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","warrior","mage","archer","thief","priest","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","backgroundImage","jobImages","onClick","onMouseMove","onMouseLeave","draggable","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","id","_c2","Battle","playerParty","enemyParty","_s2","battleLog","setBattleLog","currentTurn","setCurrentTurn","isBattling","setIsBattling","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","startBattle","playerCards","map","isPlayer","enemyCards","turn","some","Promise","resolve","setTimeout","attacker","defender","filter","c","target","find","damage","max","prev","playerWon","index","disabled","log","_c3","App","_s3","my","setMy","party","setParty","enemies","i","j","g","push","isGachaAnimating","setIsGachaAnimating","gacha","newCard","idx","length","character","_c4","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\t\t\t// axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\nimport warrior from './images/전사.webp';\r\nimport mage from './images/마법사.webp';\r\nimport archer from './images/궁수.webp';\r\nimport thief from './images/도적.webp';\r\nimport priest from './images/사제.webp';\r\n\r\n// 직업(job)과 등급(grade) 설정\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// 카드 컴포넌트 (각 카드의 UI와 효과를 관리)\r\nfunction Card({ job, grade, isFlipped, onFlip }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });  // 카드 회전 상태\r\n  const cardRef = useRef(null);  // 카드 참조\r\n\r\n  // 마우스 이동 시 카드가 3D로 회전하는 효과를 처리하는 함수\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;  // isFlipped 체크 제거\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();  // 카드의 위치와 크기 정보를 가져옴\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    // 마우스 위치에 따라 카드의 회전 각도를 계산\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  // 마우스가 카드에서 벗어나면 회전 효과를 리셋하는 함수\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s',  // 3D 회전 효과\r\n        backgroundImage: `url(${jobImages[job]})`\r\n      }}\r\n      onClick={onFlip}  // 카드 클릭 시 뒤집기\r\n      onMouseMove={handleMouseMove}  // 마우스 이동 시 회전\r\n      onMouseLeave={handleMouseLeave}  // 마우스가 카드에서 벗어나면 리셋\r\n      draggable\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역\r\nfunction CardArea({ children }) {\r\n  return (\r\n    <div id='card_area'>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 전투 컴포넌트\r\nfunction Battle({ playerParty, enemyParty }) {\r\n  const [battleLog, setBattleLog] = useState([]);  // 전투 로그\r\n  const [currentTurn, setCurrentTurn] = useState(1);  // 현재 턴\r\n  const [isBattling, setIsBattling] = useState(false);  // 전투 진행 여부\r\n\r\n  // 카드의 스탯 계산 함수 (등급과 직업에 따른 스탯 계산)\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 25, def: 20 },\r\n      SR: { hp: 80, atk: 20, def: 15 },\r\n      S: { hp: 60, atk: 15, def: 12 },\r\n      R: { hp: 50, atk: 12, def: 10 },\r\n      H: { hp: 40, atk: 10, def: 8 },\r\n      N: { hp: 30, atk: 8, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.3, atk: 1.0, def: 1.2 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.0, atk: 0.8, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  // 전투 시작 함수\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog(['전투 시작!']);  // 전투 시작 로그\r\n\r\n    // 플레이어와 적 카드의 스탯 계산\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0)) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));  // 1초 대기\r\n\r\n      // 공격자와 방어자 설정 (홀수 턴은 플레이어, 짝수 턴은 적)\r\n      const attacker = turn % 2 === 1 ? playerCards : enemyCards;\r\n      const defender = turn % 2 === 1 ? enemyCards : playerCards;\r\n\r\n      // 공격 실행\r\n      for (let card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damage = Math.max(1, card.atk - target.def);  // 데미지 계산 (방어력 고려)\r\n          target.hp = Math.max(0, target.hp - damage);  // HP 차감\r\n\r\n          setBattleLog(prev => [...prev, \r\n            `${card.job}(${card.grade})가 ${target.job}(${target.grade})에게 ${damage} 데미지를 입혔습니다! (${target.hp}/${target.maxHp})`\r\n          ]);\r\n        }\r\n      }\r\n\r\n      setCurrentTurn(turn);  // 현재 턴 갱신\r\n      turn++;\r\n    }\r\n\r\n    // 승패 판정\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    setBattleLog(prev => [...prev, \r\n      playerWon ? '플레이어의 승리!' : '적의 승리!'\r\n    ]);\r\n    setIsBattling(false);  // 전투 종료\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-field\">\r\n        <div className=\"enemy-area\">\r\n          {enemyParty.map((card, index) => (\r\n            <Card key={`enemy-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n        <div className=\"player-area\">\r\n          {playerParty.map((card, index) => (\r\n            <Card key={`player-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"battle-controls\">\r\n        <button \r\n          onClick={startBattle} \r\n          disabled={isBattling}\r\n          className=\"battle-button\"\r\n        >\r\n          전투 시작\r\n        </button>\r\n        <div className=\"turn-counter\">턴: {currentTurn}</div>\r\n      </div>\r\n\r\n      <div className=\"battle-log\">\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className=\"log-entry\">{log}</div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [my, setMy] = useState([]);  // 보유 카드\r\n  const [party, setParty] = useState([  // 기본 파티 설정\r\n    { job: '전사', grade: 'SSR', isFlipped: false },\r\n    { job: '마법사', grade: 'SR', isFlipped: false },\r\n    { job: '궁수', grade: 'S', isFlipped: false },\r\n    { job: '전사', grade: 'R', isFlipped: false },\r\n    { job: '궁수', grade: 'H', isFlipped: false }\r\n  ]);\r\n  \r\n  // 적 파티 생성 - 랜덤하게 생성\r\n  const [enemyParty] = useState(() => {\r\n    const enemies = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      const j = jobs[dice(0, 4)];\r\n      const g = grade[getLuck()];\r\n      enemies.push({ job: j, grade: g, isFlipped: false });\r\n    }\r\n    return enemies;\r\n  });\r\n  \r\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);  // 가챠 애니메이션 상태\r\n\r\n  // 가챠 연출과 카드 추가 함수\r\n  async function gacha() {\r\n    setIsGachaAnimating(true);\r\n    \r\n    const j = jobs[dice(0,4)];  // 랜덤 직업\r\n    const g = grade[getLuck()];  // 랜덤 등급\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, 1000));  // 1초 딜레이\r\n    \r\n    const newCard = { job: j, grade: g, isFlipped: true };  // 새로운 카드 추가\r\n    setMy(prev => [...prev, newCard]);\r\n    \r\n    // 카드 뒤집기 애니메이션\r\n    setTimeout(() => {\r\n      setMy(prev => prev.map((card, idx) => \r\n        idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n      ));\r\n    }, 500);  // 0.5초 후 뒤집기\r\n    \r\n    setIsGachaAnimating(false);  // 가챠 애니메이션 종료\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"battle-area\">\r\n        <h2>파티 1</h2>\r\n        <CardArea>\r\n          {party.map((character, index) => (\r\n            <Card \r\n              key={`party-${index}`}\r\n              job={character.job} \r\n              grade={character.grade}\r\n              isFlipped={character.isFlipped}\r\n              onFlip={() => {\r\n                setParty(prev => prev.map((card, idx) => \r\n                  idx === index ? {...card, isFlipped: !card.isFlipped} : card\r\n                ));\r\n              }}\r\n            />\r\n          ))}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"gacha-area\">\r\n        <h2>가챠</h2>\r\n        <button \r\n          onClick={gacha} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          카드 뽑기\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"inventory\">\r\n        <h2>보유 카드</h2>\r\n        <CardArea>\r\n          {my.map((character, index) => (\r\n            <Card \r\n              key={`my-${index}`}\r\n              job={character.job} \r\n              grade={character.grade}\r\n              isFlipped={character.isFlipped}\r\n              onFlip={() => {\r\n                setMy(prev => prev.map((card, idx) => \r\n                  idx === index ? {...card, isFlipped: !card.isFlipped} : card\r\n                ));\r\n              }}\r\n            />\r\n          ))}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"battle-section\">\r\n        <h2>전투</h2>\r\n        <Battle playerParty={party} enemyParty={enemyParty} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}