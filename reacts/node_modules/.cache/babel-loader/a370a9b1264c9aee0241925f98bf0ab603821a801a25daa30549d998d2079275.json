{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\n\n// 직업(job)과 등급(grade) 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// 카드 컴포넌트 (각 카드의 UI와 효과를 관리)\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  }); // 카드 회전 상태\n  const cardRef = useRef(null); // 카드 참조\n\n  // 마우스 이동 시 카드가 3D로 회전하는 효과를 처리하는 함수\n  const handleMouseMove = e => {\n    if (!cardRef.current) return; // isFlipped 체크 제거\n\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect(); // 카드의 위치와 크기 정보를 가져옴\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n\n    // 마우스 위치에 따라 카드의 회전 각도를 계산\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n\n  // 마우스가 카드에서 벗어나면 회전 효과를 리셋하는 함수\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s' // 3D 회전 효과\n    },\n    onClick: onFlip // 카드 클릭 시 뒤집기\n    ,\n    onMouseMove: handleMouseMove // 마우스 이동 시 회전\n    ,\n    onMouseLeave: handleMouseLeave // 마우스가 카드에서 벗어나면 리셋\n    ,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n// 전투 컴포넌트\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty\n}) {\n  _s2();\n  const [battleLog, setBattleLog] = useState([]); // 전투 로그\n  const [currentTurn, setCurrentTurn] = useState(1); // 현재 턴\n  const [isBattling, setIsBattling] = useState(false); // 전투 진행 여부\n\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\n  const calculateDamage = (attacker, defender) => {\n    // 크리티컬 확률 (15%)\n    const isCritical = Math.random() < 0.15;\n    // 회피 확률 (10%)\n    const isEvaded = Math.random() < 0.10;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    let damage = Math.max(1, attacker.atk - defender.def);\n    if (isCritical) {\n      damage = Math.floor(damage * 1.5);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n\n  // 로그 메시지 생성 함수 수정\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\n      };\n    }\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\n    if (damageInfo.isCritical) {\n      message = `크리티컬! ${message}`;\n    }\n    message += ` (${target.hp}/${target.maxHp})`;\n    return {\n      text: message,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt' : damageInfo.isCritical ? 'critical-taken' : 'damage-taken'\n    };\n  };\n\n  // 전투 시작 함수 수정\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    const maxTurns = 30; // 최대 턴 수 제한\n\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= maxTurns) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const isPlayerTurn = turn % 2 === 1;\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\n      const defender = isPlayerTurn ? enemyCards : playerCards;\n      setBattleLog(prev => [...prev, {\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`,\n        type: 'turn-start'\n      }]);\n      for (let card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damageInfo = calculateDamage(card, target);\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\n          setBattleLog(prev => [...prev, createLogMessage(card, target, damageInfo, isPlayerTurn)]);\n        }\n      }\n      setCurrentTurn(turn);\n      turn++;\n    }\n\n    // 승패 판정\n    const playerWon = playerCards.some(card => card.hp > 0);\n    setBattleLog(prev => [...prev, {\n      text: playerWon ? '플레이어의 승리!' : '적의 승리!',\n      type: playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-area\",\n        children: enemyParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `enemy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-area\",\n        children: playerParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `player-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startBattle,\n        disabled: isBattling,\n        className: \"battle-button\",\n        children: \"\\uC804\\uD22C \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-counter\",\n        children: [\"\\uD134: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 242,\n    columnNumber: 5\n  }, this);\n}\n_s2(Battle, \"mpltea7vom6N9mYm3cZdMBjWO7Y=\");\n_c3 = Battle;\nfunction App() {\n  _s3();\n  const [my, setMy] = useState([]); // 보유 카드\n  const [party, setParty] = useState([\n  // 기본 파티 설정\n  {\n    job: '전사',\n    grade: 'SSR',\n    isFlipped: false\n  }, {\n    job: '마법사',\n    grade: 'SR',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'S',\n    isFlipped: false\n  }, {\n    job: '전사',\n    grade: 'R',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'H',\n    isFlipped: false\n  }]);\n\n  // 적 파티 생성 - 랜덤하게 생성\n  const [enemyParty] = useState(() => {\n    const enemies = [];\n    for (let i = 0; i < 5; i++) {\n      const j = jobs[dice(0, 4)];\n      const g = grade[getLuck()];\n      enemies.push({\n        job: j,\n        grade: g,\n        isFlipped: false\n      });\n    }\n    return enemies;\n  });\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false); // 가챠 애니메이션 상태\n\n  // 가챠 연출과 카드 추가 함수를 수정\n  async function gacha() {\n    setIsGachaAnimating(true);\n    try {\n      // 로컬 가챠 (기존 방식)\n      const j = jobs[dice(0, 4)];\n      const g = grade[getLuck()];\n      const newCard = {\n        job: j,\n        grade: g,\n        isFlipped: true\n      };\n      setMy(prev => [...prev, newCard]);\n\n      // 카드 뒤집기 애니메이션\n      setTimeout(() => {\n        setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n          ...card,\n          isFlipped: false\n        } : card));\n      }, 500);\n    } catch (error) {\n      console.error('가챠 실패:', error);\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\n    } finally {\n      setIsGachaAnimating(false);\n    }\n  }\n\n  // API를 통한 가챠 함수 추가\n  async function gachaApi() {\n    setIsGachaAnimating(true);\n    try {\n      const response = await axios.get('http://localhost:8080/spring/api/gacha');\n      const newCard = {\n        ...response.data,\n        isFlipped: true\n      };\n      setMy(prev => [...prev, newCard]);\n\n      // 카드 뒤집기 애니메이션\n      setTimeout(() => {\n        setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n          ...card,\n          isFlipped: false\n        } : card));\n      }, 500);\n    } catch (error) {\n      console.error('API 가챠 실패:', error);\n      alert('API를 통한 카드 뽑기에 실패했습니다. 다시 시도해주세요.');\n    } finally {\n      setIsGachaAnimating(false);\n    }\n  }\n\n  // 카드 클릭 이벤트 핸들러 추가\n  function handleCardClick(index) {\n    console.log(`보유카드 ��호: ${index}`);\n    alert(`보유카드 번호: ${index}`);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD30C\\uD2F0 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        children: party.map((character, index) => /*#__PURE__*/_jsxDEV(Card, {\n          job: character.job,\n          grade: character.grade,\n          isFlipped: character.isFlipped,\n          onFlip: () => {\n            setParty(prev => prev.map((card, idx) => idx === index ? {\n              ...card,\n              isFlipped: !card.isFlipped\n            } : card));\n          }\n        }, `party-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gacha-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: gacha,\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"\\uB85C\\uCEEC \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: gachaApi,\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"API \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBCF4\\uC720 \\uCE74\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        children: my.map((character, index) => /*#__PURE__*/_jsxDEV(Card, {\n          job: character.job,\n          grade: character.grade,\n          isFlipped: character.isFlipped,\n          onFlip: () => handleCardClick(index)\n        }, `my-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC804\\uD22C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Battle, {\n        playerParty: party,\n        enemyParty: enemyParty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"tOVWKAmev8PB1gs3eaJC6P5EhvM=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","draggable","onDragStart","index","onDragOver","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","id","_c2","Battle","playerParty","enemyParty","_s2","battleLog","setBattleLog","currentTurn","setCurrentTurn","isBattling","setIsBattling","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","isCritical","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","text","type","message","startBattle","playerCards","map","isPlayer","enemyCards","turn","maxTurns","some","Promise","resolve","setTimeout","isPlayerTurn","prev","filter","c","find","playerWon","disabled","log","_c3","App","_s3","my","setMy","party","setParty","enemies","i","j","g","push","isGachaAnimating","setIsGachaAnimating","gacha","newCard","idx","length","error","console","alert","gachaApi","response","get","data","handleCardClick","character","_c4","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\t\t\t// axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\n\r\n// 직업(job)과 등급(grade) 설정\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// 카드 컴포넌트 (각 카드의 UI와 효과를 관리)\r\nfunction Card({ job, grade, isFlipped, onFlip }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });  // 카드 회전 상태\r\n  const cardRef = useRef(null);  // 카드 참조\r\n\r\n  // 마우스 이동 시 카드가 3D로 회전하는 효과를 처리하는 함수\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;  // isFlipped 체크 제거\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();  // 카드의 위치와 크기 정보를 가져옴\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    // 마우스 위치에 따라 카드의 회전 각도를 계산\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  // 마우스가 카드에서 벗어나면 회전 효과를 리셋하는 함수\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'  // 3D 회전 효과\r\n      }}\r\n      onClick={onFlip}  // 카드 클릭 시 뒤집기\r\n      onMouseMove={handleMouseMove}  // 마우스 이동 시 회전\r\n      onMouseLeave={handleMouseLeave}  // 마우스가 카드에서 벗어나면 리셋\r\n      draggable = {draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역\r\nfunction CardArea({ children }) {\r\n  return (\r\n    <div id='card_area'>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 전투 컴포넌트\r\nfunction Battle({ playerParty, enemyParty }) {\r\n  const [battleLog, setBattleLog] = useState([]);  // 전투 로그\r\n  const [currentTurn, setCurrentTurn] = useState(1);  // 현재 턴\r\n  const [isBattling, setIsBattling] = useState(false);  // 전투 진행 여부\r\n\r\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\r\n  const calculateDamage = (attacker, defender) => {\r\n    // 크리티컬 확률 (15%)\r\n    const isCritical = Math.random() < 0.15;\r\n    // 회피 확률 (10%)\r\n    const isEvaded = Math.random() < 0.10;\r\n\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    let damage = Math.max(1, attacker.atk - defender.def);\r\n    if (isCritical) {\r\n      damage = Math.floor(damage * 1.5);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false };\r\n  };\r\n\r\n  // 로그 메시지 생성 함수 수정\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\r\n      };\r\n    }\r\n\r\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\r\n    if (damageInfo.isCritical) {\r\n      message = `크리티컬! ${message}`;\r\n    }\r\n    message += ` (${target.hp}/${target.maxHp})`;\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? \r\n        (damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt') : \r\n        (damageInfo.isCritical ? 'critical-taken' : 'damage-taken')\r\n    };\r\n  };\r\n\r\n  // 전투 시작 함수 수정\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    const maxTurns = 30; // 최대 턴 수 제한\r\n\r\n    while (playerCards.some(card => card.hp > 0) && \r\n           enemyCards.some(card => card.hp > 0) && \r\n           turn <= maxTurns) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const isPlayerTurn = turn % 2 === 1;\r\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\r\n      const defender = isPlayerTurn ? enemyCards : playerCards;\r\n\r\n      setBattleLog(prev => [...prev, { \r\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`, \r\n        type: 'turn-start' \r\n      }]);\r\n\r\n      for (let card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damageInfo = calculateDamage(card, target);\r\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n          setBattleLog(prev => [...prev, \r\n            createLogMessage(card, target, damageInfo, isPlayerTurn)\r\n          ]);\r\n        }\r\n      }\r\n\r\n      setCurrentTurn(turn);\r\n      turn++;\r\n    }\r\n\r\n    // 승패 판정\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    setBattleLog(prev => [...prev, { \r\n      text: playerWon ? '플레이어의 승리!' : '적의 승리!',\r\n      type: playerWon ? 'victory' : 'defeat'\r\n    }]);\r\n    setIsBattling(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-field\">\r\n        <div className=\"enemy-area\">\r\n          {enemyParty.map((card, index) => (\r\n            <Card key={`enemy-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n        <div className=\"player-area\">\r\n          {playerParty.map((card, index) => (\r\n            <Card key={`player-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"battle-controls\">\r\n        <button \r\n          onClick={startBattle} \r\n          disabled={isBattling}\r\n          className=\"battle-button\"\r\n        >\r\n          전투 시작\r\n        </button>\r\n        <div className=\"turn-counter\">턴: {currentTurn}</div>\r\n      </div>\r\n\r\n      <div className=\"battle-log\">\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className={`log-entry ${log.type}`}>\r\n            {log.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [my, setMy] = useState([]);  // 보유 카드\r\n  const [party, setParty] = useState([  // 기본 파티 설정\r\n    { job: '전사', grade: 'SSR', isFlipped: false },\r\n    { job: '마법사', grade: 'SR', isFlipped: false },\r\n    { job: '궁수', grade: 'S', isFlipped: false },\r\n    { job: '전사', grade: 'R', isFlipped: false },\r\n    { job: '궁수', grade: 'H', isFlipped: false }\r\n  ]);\r\n  \r\n  // 적 파티 생성 - 랜덤하게 생성\r\n  const [enemyParty] = useState(() => {\r\n    const enemies = [];\r\n    for (let i = 0; i < 5; i++) {\r\n      const j = jobs[dice(0, 4)];\r\n      const g = grade[getLuck()];\r\n      enemies.push({ job: j, grade: g, isFlipped: false });\r\n    }\r\n    return enemies;\r\n  });\r\n  \r\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);  // 가챠 애니메이션 상태\r\n\r\n  // 가챠 연출과 카드 추가 함수를 수정\r\n  async function gacha() {\r\n    setIsGachaAnimating(true);\r\n    \r\n    try {\r\n      // 로컬 가챠 (기존 방식)\r\n      const j = jobs[dice(0, 4)];\r\n      const g = grade[getLuck()];\r\n      \r\n      const newCard = {\r\n        job: j,\r\n        grade: g,\r\n        isFlipped: true\r\n      };\r\n      \r\n      setMy(prev => [...prev, newCard]);\r\n      \r\n      // 카드 뒤집기 애니메이션\r\n      setTimeout(() => {\r\n        setMy(prev => prev.map((card, idx) => \r\n          idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n        ));\r\n      }, 500);\r\n      \r\n    } catch (error) {\r\n      console.error('가챠 실패:', error);\r\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\r\n    } finally {\r\n      setIsGachaAnimating(false);\r\n    }\r\n  }\r\n\r\n  // API를 통한 가챠 함수 추가\r\n  async function gachaApi() {\r\n    setIsGachaAnimating(true);\r\n    \r\n    try {\r\n      const response = await axios.get('http://localhost:8080/spring/api/gacha');\r\n      \r\n      const newCard = {\r\n        ...response.data,\r\n        isFlipped: true\r\n      };\r\n      \r\n      setMy(prev => [...prev, newCard]);\r\n      \r\n      // 카드 뒤집기 애니메이션\r\n      setTimeout(() => {\r\n        setMy(prev => prev.map((card, idx) => \r\n          idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n        ));\r\n      }, 500);\r\n      \r\n    } catch (error) {\r\n      console.error('API 가챠 실패:', error);\r\n      alert('API를 통한 카드 뽑기에 실패했습니다. 다시 시도해주세요.');\r\n    } finally {\r\n      setIsGachaAnimating(false);\r\n    }\r\n  }\r\n\r\n  // 카드 클릭 이벤트 핸들러 추가\r\n  function handleCardClick(index) {\r\n    console.log(`보유카드 ��호: ${index}`);\r\n    alert(`보유카드 번호: ${index}`);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"battle-area\">\r\n        <h2>파티 1</h2>\r\n        <CardArea>\r\n          {party.map((character, index) => (\r\n            <Card \r\n              key={`party-${index}`}\r\n              job={character.job} \r\n              grade={character.grade}\r\n              isFlipped={character.isFlipped}\r\n              onFlip={() => {\r\n                setParty(prev => prev.map((card, idx) => \r\n                  idx === index ? {...card, isFlipped: !card.isFlipped} : card\r\n                ));\r\n              }}\r\n            />\r\n          ))}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"gacha-area\">\r\n        <h2>가챠</h2>\r\n        <button \r\n          onClick={gacha} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          로컬 가챠\r\n        </button>\r\n        <button \r\n          onClick={gachaApi} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          API 가챠\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"inventory\">\r\n        <h2>보유 카드</h2>\r\n        <CardArea>\r\n          {my.map((character, index) => (\r\n            <Card \r\n              key={`my-${index}`}\r\n              job={character.job} \r\n              grade={character.grade}\r\n              isFlipped={character.isFlipped}\r\n              onFlip={() => handleCardClick(index)}\r\n            />\r\n          ))}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"battle-section\">\r\n        <h2>전투</h2>\r\n        <Battle playerParty={party} enemyParty={enemyParty} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}