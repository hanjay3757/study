{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\n\n// constants.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const GRADES = ['SSR', 'SR', 'S', 'R', 'H', 'N'];\nexport const JOBS = ['전사', '마법사', '궁수'];\n\n// 적 파티 이름 생성을 위한 배열들\nconst enemyPrefixes = ['암흑', '혼돈', '악마', '지옥', '광기', '심연', '그림자', '악령', '죽음', '공포'];\nconst enemySuffixes = ['군단', '부대', '군대', '무리', '집단', '연합', '길드', '클랜', '파티', '팀'];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  // 확률에 따라 등급을 결정\n  if (r <= 50) {\n    // 확률에 따라 등급 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// Card 컴포넌트 - 각 카드의 UI를 담당\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const cardRef = useRef(null);\n\n  // 카드의 회전 효과를 위한 마우스 이동 이벤트 처리\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s'\n    },\n    onClick: onFlip // 카드 클릭 시 flip 상태 변경\n    ,\n    onMouseMove: handleMouseMove // 카드 위에서 마우스 이동 시 회전\n    ,\n    onMouseLeave: handleMouseLeave // 카드에서 마우스 나가면 회전 초기화\n    ,\n    draggable: draggable // 카드 드래그 가능 여부\n    ,\n    onDragStart: e => onDragStart && onDragStart(e, index) // 드래그 시작 시 처리\n    ,\n    onDragOver: e => onDragOver && onDragOver(e) // 드래그 오버 시 처리\n    ,\n    onDrop: e => onDrop && onDrop(e, index) // 드롭 시 처리\n    ,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), \"  \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), \"  \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), \"  \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역 (드래그 앤 드롭 처리)\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  onDragOver,\n  onDrop,\n  type\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    className: `card-area ${type}`,\n    onDragOver: e => onDragOver && onDragOver(e) // 드래그 오버 처리\n    ,\n    onDrop: e => onDrop && onDrop(e) // 드롭 처리\n    ,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드의 스탯 계산 함수 - 카드의 직업과 등급에 따라 다르게 계산\n_c2 = CardArea;\nconst getCardStats = card => {\n  const baseStats = {\n    SSR: {\n      hp: 100,\n      atk: 20,\n      def: 15\n    },\n    SR: {\n      hp: 85,\n      atk: 17,\n      def: 13\n    },\n    S: {\n      hp: 70,\n      atk: 15,\n      def: 11\n    },\n    R: {\n      hp: 60,\n      atk: 13,\n      def: 9\n    },\n    H: {\n      hp: 50,\n      atk: 11,\n      def: 7\n    },\n    N: {\n      hp: 40,\n      atk: 9,\n      def: 5\n    }\n  };\n  const jobMultipliers = {\n    전사: {\n      hp: 1.2,\n      atk: 0.9,\n      def: 1.3\n    },\n    마법사: {\n      hp: 0.8,\n      atk: 1.4,\n      def: 0.7\n    },\n    궁수: {\n      hp: 0.9,\n      atk: 1.2,\n      def: 0.8\n    },\n    도적: {\n      hp: 0.7,\n      atk: 1.3,\n      def: 0.6\n    },\n    사제: {\n      hp: 1.1,\n      atk: 0.7,\n      def: 1.0\n    }\n  };\n  const base = baseStats[card.grade]; // 기본 스탯을 가져옴\n  const multiplier = jobMultipliers[card.job]; // 직업에 따른 배수 값을 가져옴\n\n  return {\n    hp: Math.floor(base.hp * multiplier.hp),\n    atk: Math.floor(base.atk * multiplier.atk),\n    def: Math.floor(base.def * multiplier.def),\n    maxHp: Math.floor(base.hp * multiplier.hp) // 최대 HP\n  };\n};\n\n// 데미지 계산 함수 - 공격자와 수비자의 스탯에 따른 데미지 계산\nconst calculateDamage = (attacker, defender) => {\n  const isCritical = Math.random() < 0.15; // 15% 확률로 크리티컬\n  const isEvaded = Math.random() < 0.10; // 10% 확률로 회피\n\n  if (isEvaded) {\n    return {\n      damage: 0,\n      isCritical: false,\n      isEvaded: true\n    }; // 회피 시 데미지는 0\n  }\n  let damage = Math.max(1, attacker.atk - defender.def); // 최소 1의 데미지를 보장\n  if (isCritical) {\n    damage = Math.floor(damage * 1.5); // 크리티컬 시 데미지 1.5배\n  }\n  return {\n    damage,\n    isCritical,\n    isEvaded: false\n  };\n};\n\n// 로그 메시지 생성 함수 - 전투 로그에 출력할 메시지 형식화\nconst createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n  const attackerName = isPlayerAttack ? playerPartyName : enemyPartyName;\n  const targetName = isPlayerAttack ? enemyPartyName : playerPartyName;\n  if (damageInfo.isEvaded) {\n    return {\n      text: `${targetName}의 ${target.job}(${target.grade})가 ${attackerName}의 ${attacker.job} 공격을 회피했습니다!`\n    };\n  }\n  const damageText = damageInfo.isCritical ? `${damageInfo.damage}의 크리티컬 데미지!` : `${damageInfo.damage}의 데미지!`;\n  return {\n    text: `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 ${damageText}`\n  };\n};\n\n// 전투 컴포넌트 - 실제 전투가 이루어지는 영역\nfunction Battle({\n  playerParty,\n  enemyParty,\n  playerPartyName,\n  enemyPartyName,\n  onBattleEnd // 전투 결과를 부모 컴포넌트에 전달하기 위한 콜백\n}) {\n  _s2();\n  const [isBattling, setIsBattling] = useState(false);\n  const [battleLog, setBattleLog] = useState([]);\n  const logContainerRef = useRef(null);\n\n  // 로그 자동 스크롤\n  useEffect(() => {\n    if (logContainerRef.current) {\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n    }\n  }, [battleLog]); // battleLog가 업데이트 될 때마다 스크롤을 최신 상태로 이동\n\n  // 전투 진행 함수 - 실제 전투를 진행하고 로그 업데이트\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    const maxTurns = 30;\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= maxTurns) {\n      const isPlayerTurn = turn % 2 === 0;\n      const attacker = isPlayerTurn ? playerCards[Math.floor(Math.random() * playerCards.length)] : enemyCards[Math.floor(Math.random() * enemyCards.length)];\n      const defender = isPlayerTurn ? enemyCards[Math.floor(Math.random() * enemyCards.length)] : playerCards[Math.floor(Math.random() * playerCards.length)];\n      const attackerStats = getCardStats(attacker);\n      const defenderStats = getCardStats(defender);\n      const damageInfo = calculateDamage(attackerStats, defenderStats);\n\n      // 로그 추가\n      setBattleLog(prevLog => [...prevLog, createLogMessage(attacker, defender, damageInfo, isPlayerTurn)]);\n      turn++;\n    }\n    const playerWon = playerCards.some(card => card.hp > 0);\n    const isDraw = turn > maxTurns;\n    setBattleLog(prev => [...prev, {\n      text: isDraw ? '무승부!' : playerWon ? `${playerPartyName}의 승리!` : `${enemyPartyName}의 승리!`,\n      type: isDraw ? 'draw' : playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n\n    // 전투 결과를 부모 컴포넌트에 전달\n    if (onBattleEnd) {\n      onBattleEnd({\n        result: isDraw ? 'draw' : playerWon ? 'victory' : 'defeat',\n        playerCards,\n        enemyCards\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name player\",\n        children: playerPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vs\",\n        children: \"VS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name enemy\",\n        children: enemyPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startBattle,\n      disabled: isBattling,\n      className: `battle-button ${isBattling ? 'disabled' : ''}`,\n      children: isBattling ? '전투 중...' : '전투 시작'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: logContainerRef,\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n\n// App 컴포넌트 - 전체 애플리케이션의 UI를 담당\n_s2(Battle, \"+fHqE9fg6FQf2sF/gbn+t0JxHiQ=\");\n_c3 = Battle;\nfunction App() {\n  _s3();\n  const [cards, setCards] = useState([]);\n  const [playerParty, setPlayerParty] = useState([]);\n  const [enemyParty, setEnemyParty] = useState([]);\n  const generateCard = () => {\n    const job = JOBS[dice(0, JOBS.length - 1)]; // 랜덤 직업 선택\n    const gradeIdx = getLuck(); // 카드 등급 랜덤 선택\n    const grade = GRADES[gradeIdx];\n    const newCard = {\n      job,\n      grade\n    };\n    setCards([...cards, newCard]); // 새로운 카드 추가\n  };\n  const handleCardDragStart = (e, index) => {\n    e.dataTransfer.setData('cardIndex', index); // 카드 드래그 시작 시 index 저장\n  };\n  const handleCardDragOver = e => {\n    e.preventDefault(); // 드래그 오버 시 기본 동작 방지\n  };\n  const handleCardDrop = (e, targetIndex) => {\n    const sourceIndex = e.dataTransfer.getData('cardIndex');\n    const newCards = [...cards];\n    const movedCard = newCards[sourceIndex];\n\n    // 카드 위치 변경\n    newCards.splice(sourceIndex, 1);\n    newCards.splice(targetIndex, 0, movedCard);\n    setCards(newCards); // 카드 상태 업데이트\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCE74\\uB4DC \\uC804\\uD22C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"generate-card\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generateCard,\n        children: \"\\uCE74\\uB4DC \\uC0DD\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n      onDragOver: handleCardDragOver,\n      onDrop: handleCardDrop,\n      type: \"player\",\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        job: card.job,\n        grade: card.grade,\n        isFlipped: false,\n        onFlip: () => {},\n        draggable: true,\n        onDragStart: e => handleCardDragStart(e, index),\n        onDragOver: handleCardDragOver,\n        onDrop: e => handleCardDrop(e, index),\n        index: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Battle, {\n      playerParty: playerParty,\n      enemyParty: enemyParty,\n      playerPartyName: \"\\uD50C\\uB808\\uC774\\uC5B4\",\n      enemyPartyName: \"\\uC801\\uAD70\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"L0tzCdv+s5JPMLoyrbQelQqfuZc=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GRADES","JOBS","enemyPrefixes","enemySuffixes","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","grade","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","id","_c2","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","isCritical","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","attackerName","playerPartyName","enemyPartyName","targetName","text","damageText","Battle","playerParty","enemyParty","onBattleEnd","_s2","isBattling","setIsBattling","battleLog","setBattleLog","logContainerRef","scrollTop","scrollHeight","startBattle","playerCards","map","isPlayer","enemyCards","turn","maxTurns","some","isPlayerTurn","length","attackerStats","defenderStats","prevLog","playerWon","isDraw","prev","result","disabled","log","_c3","App","_s3","cards","setCards","setPlayerParty","setEnemyParty","generateCard","gradeIdx","newCard","handleCardDragStart","dataTransfer","setData","handleCardDragOver","preventDefault","handleCardDrop","targetIndex","sourceIndex","getData","newCards","movedCard","splice","_c4","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.css';\r\n\r\n// constants.js\r\nexport const GRADES = ['SSR', 'SR', 'S', 'R', 'H', 'N'];\r\nexport const JOBS = ['전사', '마법사', '궁수'];\r\n\r\n// 적 파티 이름 생성을 위한 배열들\r\nconst enemyPrefixes = ['암흑', '혼돈', '악마', '지옥', '광기', '심연', '그림자', '악령', '죽음', '공포'];\r\nconst enemySuffixes = ['군단', '부대', '군대', '무리', '집단', '연합', '길드', '클랜', '파티', '팀'];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  // 확률에 따라 등급을 결정\r\n  if (r <= 50) {\t// 확률에 따라 등급 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// Card 컴포넌트 - 각 카드의 UI를 담당\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\r\n  const cardRef = useRef(null);\r\n\r\n  // 카드의 회전 효과를 위한 마우스 이동 이벤트 처리\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'\r\n      }}\r\n      onClick={onFlip}  // 카드 클릭 시 flip 상태 변경\r\n      onMouseMove={handleMouseMove}  // 카드 위에서 마우스 이동 시 회전\r\n      onMouseLeave={handleMouseLeave}  // 카드에서 마우스 나가면 회전 초기화\r\n      draggable={draggable}  // 카드 드래그 가능 여부\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}  // 드래그 시작 시 처리\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}  // 드래그 오버 시 처리\r\n      onDrop={(e) => onDrop && onDrop(e, index)}  // 드롭 시 처리\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>  {/* 직업 표시 */}\r\n          <div className=\"card-grade\">{grade}</div>  {/* 카드 등급 표시 */}\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>  {/* 카드 뒷면 디자인 */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역 (드래그 앤 드롭 처리)\r\nfunction CardArea({ children, onDragOver, onDrop, type }) {\r\n  return (\r\n    <div \r\n      id='card_area'\r\n      className={`card-area ${type}`}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}  // 드래그 오버 처리\r\n      onDrop={(e) => onDrop && onDrop(e)}  // 드롭 처리\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드의 스탯 계산 함수 - 카드의 직업과 등급에 따라 다르게 계산\r\nconst getCardStats = (card) => {\r\n  const baseStats = {\r\n    SSR: { hp: 100, atk: 20, def: 15 },\r\n    SR: { hp: 85, atk: 17, def: 13 },\r\n    S: { hp: 70, atk: 15, def: 11 },\r\n    R: { hp: 60, atk: 13, def: 9 },\r\n    H: { hp: 50, atk: 11, def: 7 },\r\n    N: { hp: 40, atk: 9, def: 5 }\r\n  };\r\n\r\n  const jobMultipliers = {\r\n    전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n    마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n    궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n    도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n    사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n  };\r\n\r\n  const base = baseStats[card.grade];  // 기본 스탯을 가져옴\r\n  const multiplier = jobMultipliers[card.job];  // 직업에 따른 배수 값을 가져옴\r\n\r\n  return {\r\n    hp: Math.floor(base.hp * multiplier.hp),\r\n    atk: Math.floor(base.atk * multiplier.atk),\r\n    def: Math.floor(base.def * multiplier.def),\r\n    maxHp: Math.floor(base.hp * multiplier.hp)  // 최대 HP\r\n  };\r\n};\r\n\r\n// 데미지 계산 함수 - 공격자와 수비자의 스탯에 따른 데미지 계산\r\nconst calculateDamage = (attacker, defender) => {\r\n  const isCritical = Math.random() < 0.15;  // 15% 확률로 크리티컬\r\n  const isEvaded = Math.random() < 0.10;  // 10% 확률로 회피\r\n\r\n  if (isEvaded) {\r\n    return { damage: 0, isCritical: false, isEvaded: true };  // 회피 시 데미지는 0\r\n  }\r\n\r\n  let damage = Math.max(1, attacker.atk - defender.def);  // 최소 1의 데미지를 보장\r\n  if (isCritical) {\r\n    damage = Math.floor(damage * 1.5);  // 크리티컬 시 데미지 1.5배\r\n  }\r\n\r\n  return { damage, isCritical, isEvaded: false };\r\n};\r\n\r\n// 로그 메시지 생성 함수 - 전투 로그에 출력할 메시지 형식화\r\nconst createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n  const attackerName = isPlayerAttack ? playerPartyName : enemyPartyName;\r\n  const targetName = isPlayerAttack ? enemyPartyName : playerPartyName;\r\n  \r\n  if (damageInfo.isEvaded) {\r\n    return {\r\n      text: `${targetName}의 ${target.job}(${target.grade})가 ${attackerName}의 ${attacker.job} 공격을 회피했습니다!`\r\n    };\r\n  }\r\n\r\n  const damageText = damageInfo.isCritical \r\n    ? `${damageInfo.damage}의 크리티컬 데미지!` \r\n    : `${damageInfo.damage}의 데미지!`;\r\n\r\n  return {\r\n    text: `${attackerName}의 ${attacker.job}(${attacker.grade})가 ${targetName}의 ${target.job}(${target.grade})에게 ${damageText}`\r\n  };\r\n};\r\n\r\n// 전투 컴포넌트 - 실제 전투가 이루어지는 영역\r\nfunction Battle({ \r\n  playerParty, \r\n  enemyParty, \r\n  playerPartyName, \r\n  enemyPartyName,\r\n  onBattleEnd  // 전투 결과를 부모 컴포넌트에 전달하기 위한 콜백\r\n}) {\r\n  const [isBattling, setIsBattling] = useState(false);\r\n  const [battleLog, setBattleLog] = useState([]);\r\n  const logContainerRef = useRef(null);\r\n\r\n  // 로그 자동 스크롤\r\n  useEffect(() => {\r\n    if (logContainerRef.current) {\r\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\r\n    }\r\n  }, [battleLog]);  // battleLog가 업데이트 될 때마다 스크롤을 최신 상태로 이동\r\n\r\n  // 전투 진행 함수 - 실제 전투를 진행하고 로그 업데이트\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    const maxTurns = 30;\r\n\r\n    while (\r\n      playerCards.some(card => card.hp > 0) && \r\n      enemyCards.some(card => card.hp > 0) && \r\n      turn <= maxTurns\r\n    ) {\r\n      const isPlayerTurn = turn % 2 === 0;\r\n\r\n      const attacker = isPlayerTurn\r\n        ? playerCards[Math.floor(Math.random() * playerCards.length)]\r\n        : enemyCards[Math.floor(Math.random() * enemyCards.length)];\r\n      const defender = isPlayerTurn\r\n        ? enemyCards[Math.floor(Math.random() * enemyCards.length)]\r\n        : playerCards[Math.floor(Math.random() * playerCards.length)];\r\n\r\n      const attackerStats = getCardStats(attacker);\r\n      const defenderStats = getCardStats(defender);\r\n\r\n      const damageInfo = calculateDamage(attackerStats, defenderStats);\r\n\r\n      // 로그 추가\r\n      setBattleLog((prevLog) => [\r\n        ...prevLog,\r\n        createLogMessage(attacker, defender, damageInfo, isPlayerTurn)\r\n      ]);\r\n\r\n      turn++;\r\n    }\r\n\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    const isDraw = turn > maxTurns;\r\n\r\n    setBattleLog(prev => [...prev, { \r\n      text: isDraw ? '무승부!' : (playerWon ? `${playerPartyName}의 승리!` : `${enemyPartyName}의 승리!`),\r\n      type: isDraw ? 'draw' : (playerWon ? 'victory' : 'defeat')\r\n    }]);\r\n\r\n    setIsBattling(false);\r\n    \r\n    // 전투 결과를 부모 컴포넌트에 전달\r\n    if (onBattleEnd) {\r\n      onBattleEnd({\r\n        result: isDraw ? 'draw' : (playerWon ? 'victory' : 'defeat'),\r\n        playerCards,\r\n        enemyCards\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-header\">\r\n        <div className=\"party-name player\">{playerPartyName}</div>\r\n        <div className=\"vs\">VS</div>\r\n        <div className=\"party-name enemy\">{enemyPartyName}</div>\r\n      </div>\r\n      \r\n      <button \r\n        onClick={startBattle} \r\n        disabled={isBattling}\r\n        className={`battle-button ${isBattling ? 'disabled' : ''}`}\r\n      >\r\n        {isBattling ? '전투 중...' : '전투 시작'}\r\n      </button>\r\n\r\n      <div \r\n        ref={logContainerRef} \r\n        className=\"battle-log\"\r\n      >\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className={`log-entry ${log.type}`}>\r\n            {log.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// App 컴포넌트 - 전체 애플리케이션의 UI를 담당\r\nfunction App() {\r\n  const [cards, setCards] = useState([]);\r\n  const [playerParty, setPlayerParty] = useState([]);\r\n  const [enemyParty, setEnemyParty] = useState([]);\r\n\r\n  const generateCard = () => {\r\n    const job = JOBS[dice(0, JOBS.length - 1)];\t// 랜덤 직업 선택\r\n    const gradeIdx = getLuck();  // 카드 등급 랜덤 선택\r\n    const grade = GRADES[gradeIdx];\r\n    const newCard = { job, grade };\r\n\r\n    setCards([...cards, newCard]);  // 새로운 카드 추가\r\n  };\r\n\r\n  const handleCardDragStart = (e, index) => {\r\n    e.dataTransfer.setData('cardIndex', index);  // 카드 드래그 시작 시 index 저장\r\n  };\r\n\r\n  const handleCardDragOver = (e) => {\r\n    e.preventDefault();  // 드래그 오버 시 기본 동작 방지\r\n  };\r\n\r\n  const handleCardDrop = (e, targetIndex) => {\r\n    const sourceIndex = e.dataTransfer.getData('cardIndex');\r\n    const newCards = [...cards];\r\n    const movedCard = newCards[sourceIndex];\r\n\r\n    // 카드 위치 변경\r\n    newCards.splice(sourceIndex, 1);\r\n    newCards.splice(targetIndex, 0, movedCard);\r\n\r\n    setCards(newCards);  // 카드 상태 업데이트\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>카드 전투</h1>\r\n      <div className=\"generate-card\">\r\n        <button onClick={generateCard}>카드 생성</button>\r\n      </div>\r\n\r\n      <CardArea onDragOver={handleCardDragOver} onDrop={handleCardDrop} type=\"player\">\r\n        {cards.map((card, index) => (\r\n          <Card\r\n            key={index}\r\n            job={card.job}\r\n            grade={card.grade}\r\n            isFlipped={false}\r\n            onFlip={() => {}}\r\n            draggable\r\n            onDragStart={(e) => handleCardDragStart(e, index)}\r\n            onDragOver={handleCardDragOver}\r\n            onDrop={(e) => handleCardDrop(e, index)}\r\n            index={index}\r\n          />\r\n        ))}\r\n      </CardArea>\r\n\r\n      {/* 전투 시작 컴포넌트 */}\r\n      <Battle\r\n        playerParty={playerParty}\r\n        enemyParty={enemyParty}\r\n        playerPartyName=\"플레이어\"\r\n        enemyPartyName=\"적군\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}