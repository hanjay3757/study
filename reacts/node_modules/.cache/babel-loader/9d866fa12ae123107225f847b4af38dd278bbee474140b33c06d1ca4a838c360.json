{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from 'axios';\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1;\n  var t = 5;\n  if (r <= 50) {\n    t = 4;\n  }\n  if (r <= 20) {\n    t = 3;\n  }\n  if (r <= 10) {\n    t = 2;\n  }\n  if (r <= 4) {\n    t = 1;\n  }\n  if (r === 1) {\n    t = 0;\n  }\n  return t;\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const cardRef = useRef(null);\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s'\n    },\n    onClick: onFlip,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e, index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  onDragOver,\n  onDrop,\n  type\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    className: `card-area ${type}`,\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty\n}) {\n  _s2();\n  const [battleLog, setBattleLog] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(1);\n  const [isBattling, setIsBattling] = useState(false);\n  const logContainerRef = useRef(null);\n  useEffect(() => {\n    if (logContainerRef.current) {\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n    }\n  }, [battleLog]);\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n  const calculateDamage = (attacker, defender) => {\n    const isCritical = Math.random() < 0.15;\n    const isEvaded = Math.random() < 0.10;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    let damage = Math.max(1, attacker.atk - defender.def);\n    if (isCritical) {\n      damage = Math.floor(damage * 1.5);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\n      };\n    }\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\n    if (damageInfo.isCritical) {\n      message = `크리티컬! ${message}`;\n    }\n    message += ` (${target.hp}/${target.maxHp})`;\n    return {\n      text: message,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt' : damageInfo.isCritical ? 'critical-taken' : 'damage-taken'\n    };\n  };\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    const maxTurns = 30;\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= maxTurns) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const isPlayerTurn = turn % 2 === 1;\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\n      const defender = isPlayerTurn ? enemyCards : playerCards;\n      setBattleLog(prev => [...prev, {\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`,\n        type: 'turn-start'\n      }]);\n      for (let card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damageInfo = calculateDamage(card, target);\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\n          setBattleLog(prev => [...prev, createLogMessage(card, target, damageInfo, isPlayerTurn)]);\n        }\n      }\n      turn++;\n    }\n    const playerWon = playerCards.some(card => card.hp > 0);\n    setBattleLog(prev => [...prev, {\n      text: playerWon ? '플레이어의 승리!' : '적의 승리!',\n      type: playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name player\",\n        children: \"\\uD50C\\uB808\\uC774\\uC5B4 \\uD30C\\uD2F0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vs\",\n        children: \"VS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name enemy\",\n        children: \"\\uC801 \\uD30C\\uD2F0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-area\",\n        children: enemyParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `enemy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-area\",\n        children: playerParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `player-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startBattle,\n      disabled: isBattling,\n      className: `battle-button ${isBattling ? 'disabled' : ''}`,\n      children: isBattling ? '전투 중...' : '전투 시작'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: logContainerRef,\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n}\n_s2(Battle, \"iSkId13uWHTO1a4EKzrHw5lZ/UQ=\");\n_c3 = Battle;\nfunction App() {\n  _s3();\n  const [playerParty, setPlayerParty] = useState([]);\n  const [enemyParty, setEnemyParty] = useState([]);\n  const [selectedCards, setSelectedCards] = useState([]);\n  const [deck, setDeck] = useState([]);\n  const [isFlipped, setIsFlipped] = useState(false);\n  const [cards, setCards] = useState([]);\n  const [selectedCardIndex, setSelectedCardIndex] = useState(null);\n  const [draggingCardIndex, setDraggingCardIndex] = useState(null);\n  const [cardArea, setCardArea] = useState([]); // 플레이어 카드 영역\n  const [showInfo, setShowInfo] = useState(false); // 카드 정보 토글\n\n  const fetchCardData = async () => {\n    try {\n      const response = await axios.get('/api/cards');\n      setCards(response.data);\n    } catch (error) {\n      console.error('카드 데이터를 가져오는 데 실패했습니다.', error);\n    }\n  };\n  const flipCard = index => {\n    setIsFlipped(!isFlipped);\n    if (!isFlipped) {\n      setSelectedCardIndex(index);\n    }\n  };\n  const onDragStart = (e, index) => {\n    setDraggingCardIndex(index);\n  };\n  const onDragOver = e => {\n    e.preventDefault();\n  };\n  const onDrop = (e, index) => {\n    e.preventDefault();\n    if (draggingCardIndex === index) {\n      return;\n    }\n    const newCards = [...cards];\n    const movedCard = newCards[draggingCardIndex];\n    newCards.splice(draggingCardIndex, 1);\n    newCards.splice(index, 0, movedCard);\n    setCards(newCards);\n  };\n  useEffect(() => {\n    fetchCardData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCE74\\uB4DC \\uBC30\\uD2C0 \\uAC8C\\uC784\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Battle, {\n      playerParty: playerParty,\n      enemyParty: enemyParty\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n      type: \"player\",\n      onDragOver: onDragOver,\n      onDrop: onDrop,\n      children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n        job: card.job,\n        grade: card.grade,\n        isFlipped: index === selectedCardIndex,\n        onFlip: () => flipCard(index),\n        draggable: true,\n        onDragStart: onDragStart,\n        onDragOver: onDragOver,\n        onDrop: onDrop,\n        index: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"yyPQnLDtAYeqBgatR8wUkA0uN04=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","useEffect","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","id","_c2","Battle","playerParty","enemyParty","_s2","battleLog","setBattleLog","currentTurn","setCurrentTurn","isBattling","setIsBattling","logContainerRef","scrollTop","scrollHeight","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","isCritical","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","text","message","startBattle","playerCards","map","isPlayer","enemyCards","turn","maxTurns","some","Promise","resolve","setTimeout","isPlayerTurn","prev","filter","c","find","playerWon","disabled","log","_c3","App","_s3","setPlayerParty","setEnemyParty","selectedCards","setSelectedCards","deck","setDeck","setIsFlipped","cards","setCards","selectedCardIndex","setSelectedCardIndex","draggingCardIndex","setDraggingCardIndex","cardArea","setCardArea","showInfo","setShowInfo","fetchCardData","response","get","data","error","console","flipCard","preventDefault","newCards","movedCard","splice","_c4","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport './App.css';\r\n\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;\r\n  var t = 5;\r\n\r\n  if (r <= 50) {\r\n    t = 4;\r\n  }\r\n  if (r <= 20) {\r\n    t = 3;\r\n  }\r\n  if (r <= 10) {\r\n    t = 2;\r\n  }\r\n  if (r <= 4) {\r\n    t = 1;\r\n  }\r\n  if (r === 1) {\r\n    t = 0;\r\n  }\r\n\r\n  return t;\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\r\n  const cardRef = useRef(null);\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'\r\n      }}\r\n      onClick={onFlip}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      draggable={draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e, index)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CardArea({ children, onDragOver, onDrop, type }) {\r\n  return (\r\n    <div\r\n      id='card_area'\r\n      className={`card-area ${type}`}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Battle({ playerParty, enemyParty }) {\r\n  const [battleLog, setBattleLog] = useState([]);\r\n  const [currentTurn, setCurrentTurn] = useState(1);\r\n  const [isBattling, setIsBattling] = useState(false);\r\n  const logContainerRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (logContainerRef.current) {\r\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\r\n    }\r\n  }, [battleLog]);\r\n\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  const calculateDamage = (attacker, defender) => {\r\n    const isCritical = Math.random() < 0.15;\r\n    const isEvaded = Math.random() < 0.10;\r\n\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    let damage = Math.max(1, attacker.atk - defender.def);\r\n    if (isCritical) {\r\n      damage = Math.floor(damage * 1.5);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false };\r\n  };\r\n\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\r\n      };\r\n    }\r\n\r\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\r\n    if (damageInfo.isCritical) {\r\n      message = `크리티컬! ${message}`;\r\n    }\r\n    message += ` (${target.hp}/${target.maxHp})`;\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? \r\n        (damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt') : \r\n        (damageInfo.isCritical ? 'critical-taken' : 'damage-taken')\r\n    };\r\n  };\r\n\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    const maxTurns = 30;\r\n\r\n    while (playerCards.some(card => card.hp > 0) &&\r\n      enemyCards.some(card => card.hp > 0) &&\r\n      turn <= maxTurns) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const isPlayerTurn = turn % 2 === 1;\r\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\r\n      const defender = isPlayerTurn ? enemyCards : playerCards;\r\n\r\n      setBattleLog(prev => [...prev, {\r\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`,\r\n        type: 'turn-start'\r\n      }]);\r\n\r\n      for (let card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damageInfo = calculateDamage(card, target);\r\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n          setBattleLog(prev => [...prev,\r\n            createLogMessage(card, target, damageInfo, isPlayerTurn)\r\n          ]);\r\n        }\r\n      }\r\n\r\n      turn++;\r\n    }\r\n\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    setBattleLog(prev => [...prev, {\r\n      text: playerWon ? '플레이어의 승리!' : '적의 승리!',\r\n      type: playerWon ? 'victory' : 'defeat'\r\n    }]);\r\n\r\n    setIsBattling(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-header\">\r\n        <div className=\"party-name player\">플레이어 파티</div>\r\n        <div className=\"vs\">VS</div>\r\n        <div className=\"party-name enemy\">적 파티</div>\r\n      </div>\r\n\r\n      <div className=\"battle-field\">\r\n        <div className=\"enemy-area\">\r\n          {enemyParty.map((card, index) => (\r\n            <Card key={`enemy-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n        <div className=\"player-area\">\r\n          {playerParty.map((card, index) => (\r\n            <Card key={`player-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <button \r\n        onClick={startBattle} \r\n        disabled={isBattling}\r\n        className={`battle-button ${isBattling ? 'disabled' : ''}`}\r\n      >\r\n        {isBattling ? '전투 중...' : '전투 시작'}\r\n      </button>\r\n\r\n      <div \r\n        ref={logContainerRef} \r\n        className=\"battle-log\"\r\n      >\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className={`log-entry ${log.type}`}>\r\n            {log.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [playerParty, setPlayerParty] = useState([]);\r\n  const [enemyParty, setEnemyParty] = useState([]);\r\n  const [selectedCards, setSelectedCards] = useState([]);\r\n  const [deck, setDeck] = useState([]);\r\n  const [isFlipped, setIsFlipped] = useState(false);\r\n  const [cards, setCards] = useState([]);\r\n  const [selectedCardIndex, setSelectedCardIndex] = useState(null);\r\n  const [draggingCardIndex, setDraggingCardIndex] = useState(null);\r\n  const [cardArea, setCardArea] = useState([]);  // 플레이어 카드 영역\r\n  const [showInfo, setShowInfo] = useState(false); // 카드 정보 토글\r\n\r\n  const fetchCardData = async () => {\r\n    try {\r\n      const response = await axios.get('/api/cards');\r\n      setCards(response.data);\r\n    } catch (error) {\r\n      console.error('카드 데이터를 가져오는 데 실패했습니다.', error);\r\n    }\r\n  };\r\n\r\n  const flipCard = (index) => {\r\n    setIsFlipped(!isFlipped);\r\n    if (!isFlipped) {\r\n      setSelectedCardIndex(index);\r\n    }\r\n  };\r\n\r\n  const onDragStart = (e, index) => {\r\n    setDraggingCardIndex(index);\r\n  };\r\n\r\n  const onDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const onDrop = (e, index) => {\r\n    e.preventDefault();\r\n    if (draggingCardIndex === index) {\r\n      return;\r\n    }\r\n    const newCards = [...cards];\r\n    const movedCard = newCards[draggingCardIndex];\r\n    newCards.splice(draggingCardIndex, 1);\r\n    newCards.splice(index, 0, movedCard);\r\n    setCards(newCards);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCardData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>카드 배틀 게임</h1>\r\n      <Battle \r\n        playerParty={playerParty}\r\n        enemyParty={enemyParty}\r\n      />\r\n      <CardArea\r\n        type=\"player\"\r\n        onDragOver={onDragOver}\r\n        onDrop={onDrop}\r\n      >\r\n        {cards.map((card, index) => (\r\n          <Card\r\n            key={index}\r\n            job={card.job}\r\n            grade={card.grade}\r\n            isFlipped={index === selectedCardIndex}\r\n            onFlip={() => flipCard(index)}\r\n            draggable={true}\r\n            onDragStart={onDragStart}\r\n            onDragOver={onDragOver}\r\n            onDrop={onDrop}\r\n            index={index}\r\n          />\r\n        ))}\r\n      </CardArea>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}