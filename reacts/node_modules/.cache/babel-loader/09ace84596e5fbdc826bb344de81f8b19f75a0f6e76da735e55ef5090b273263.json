{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef, useEffect } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\n\n// 직업(job)과 등급(grade) 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// Card 컴포넌트 통합\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const cardRef = useRef(null);\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s'\n    },\n    onClick: onFlip,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e, index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  onDragOver,\n  onDrop,\n  type\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    className: `card-area ${type}`,\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n// 전투 컴포넌트\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty,\n  playerPartyName,\n  enemyPartyName,\n  onBattleEnd\n}) {\n  _s2();\n  const [isBattling, setIsBattling] = useState(false);\n  const [battleLog, setBattleLog] = useState([]);\n  const logContainerRef = useRef(null);\n  const turnRef = useRef(1);\n\n  // 카드 스탯 계산 함수\n  const getCardStats = card => {\n    const gradeStats = {\n      'SSR': {\n        hp: 100,\n        atk: 30,\n        def: 20,\n        eva: 15\n      },\n      'SR': {\n        hp: 85,\n        atk: 25,\n        def: 15,\n        eva: 12\n      },\n      'S': {\n        hp: 70,\n        atk: 20,\n        def: 12,\n        eva: 10\n      },\n      'R': {\n        hp: 60,\n        atk: 15,\n        def: 10,\n        eva: 8\n      },\n      'H': {\n        hp: 50,\n        atk: 12,\n        def: 8,\n        eva: 6\n      },\n      'N': {\n        hp: 40,\n        atk: 10,\n        def: 5,\n        eva: 5\n      }\n    };\n    const stats = gradeStats[card.grade];\n    return {\n      ...stats,\n      maxHp: stats.hp,\n      hp: stats.hp\n    };\n  };\n\n  // 데미지 계산 함수\n  const calculateDamage = (attacker, target) => {\n    const damage = Math.max(1, attacker.atk - target.def);\n    const isCritical = Math.random() < 0.2;\n    const isEvaded = Math.random() * 100 < target.eva;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    return {\n      damage: isCritical ? Math.floor(damage * 1.5) : damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n\n  // 로그 메시지 생성 함수\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${target.job}(${target.grade})가 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'player-miss' : 'enemy-miss'\n      };\n    }\n    const message = damageInfo.isCritical ? `치명타! ${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지!` : `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지!`;\n    return {\n      text: `${message} (HP: ${target.hp}/${target.maxHp})`,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'player-critical' : 'player-attack' : damageInfo.isCritical ? 'enemy-critical' : 'enemy-attack'\n    };\n  };\n\n  // 카드 그룹화 함수\n  const groupCards = cards => {\n    return cards.reduce((acc, card) => {\n      const key = `${card.job}-${card.grade}`;\n      if (!acc[key]) {\n        acc[key] = {\n          ...card,\n          count: 1\n        };\n      } else {\n        acc[key].count++;\n      }\n      return acc;\n    }, {});\n  };\n\n  // 전투 시작 함수\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    turnRef.current = 1;\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    const maxTurns = 30;\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turnRef.current <= maxTurns) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const isPlayerTurn = turnRef.current % 2 === 1;\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\n      const defender = isPlayerTurn ? enemyCards : playerCards;\n      setBattleLog(prev => [...prev, {\n        text: `${turnRef.current}턴: ${isPlayerTurn ? playerPartyName : enemyPartyName} 턴 시작!`,\n        type: 'turn-start'\n      }]);\n      for (const card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damageInfo = calculateDamage(card, target);\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\n          setBattleLog(prev => [...prev, createLogMessage(card, target, damageInfo, isPlayerTurn)]);\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n      turnRef.current += 1;\n    }\n    const playerWon = playerCards.some(card => card.hp > 0);\n    const isDraw = turnRef.current > maxTurns;\n    setBattleLog(prev => [...prev, {\n      text: isDraw ? '무승부!' : playerWon ? `${playerPartyName}의 승리!` : `${enemyPartyName}의 승리!`,\n      type: isDraw ? 'draw' : playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n    if (onBattleEnd) {\n      onBattleEnd({\n        result: isDraw ? 'draw' : playerWon ? 'victory' : 'defeat',\n        playerCards,\n        enemyCards\n      });\n    }\n  };\n\n  // 그룹화된 카드 렌더링 함수\n  const renderGroupedCards = (cards, isPlayer) => {\n    const groupedCards = groupCards(cards);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `card-group ${isPlayer ? 'player' : 'enemy'}`,\n      children: Object.values(groupedCards).map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-stack\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `battle-card ${isPlayer ? 'player' : 'enemy'}`,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"card-job\",\n              children: card.job\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"card-grade\",\n              children: card.grade\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 17\n            }, this), card.count > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"card-count\",\n              children: [\"x\", card.count]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name player\",\n        children: playerPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"vs\",\n        children: \"VS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"party-name enemy\",\n        children: enemyPartyName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-field\",\n        children: renderGroupedCards(playerParty, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-field\",\n        children: renderGroupedCards(enemyParty, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startBattle,\n      disabled: isBattling,\n      className: `battle-button ${isBattling ? 'disabled' : ''}`,\n      children: isBattling ? '전투 중...' : '전투 시작'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: logContainerRef,\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드 등급 상승 함수 추가\n_s2(Battle, \"qP/N8W3JBVIGC3WxYWZZcQj73ik=\");\n_c3 = Battle;\nconst getNextGrade = currentGrade => {\n  const gradeIndex = grade.indexOf(currentGrade);\n  return gradeIndex > 0 ? grade[gradeIndex - 1] : currentGrade; // 더 높은 등급으로\n};\nfunction App() {\n  _s3();\n  const [my, setMy] = useState([]);\n  const [party, setParty] = useState([{\n    job: '전사',\n    grade: 'SSR',\n    isFlipped: false\n  }, {\n    job: '마법사',\n    grade: 'SR',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'S',\n    isFlipped: false\n  }, {\n    job: '전사',\n    grade: 'R',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'H',\n    isFlipped: false\n  }]);\n\n  // 적 파티 상태 추가 - 랜덤하게 생성\n  const [enemyParty] = useState(() => {\n    return Array(5).fill(null).map(() => ({\n      job: jobs[dice(0, 4)],\n      grade: grade[getLuck()],\n      isFlipped: false\n    }));\n  });\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\n\n  // 드래그 앤 드롭 핸들러 통합\n  const handleDragStart = (e, sourceType, index) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      type: sourceType,\n      index\n    }));\n  };\n\n  // 드롭 처리 통합 함수 수정\n  const handleDrop = (e, targetType, targetIndex = null) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      const {\n        type: sourceType,\n        index: sourceIndex\n      } = JSON.parse(e.dataTransfer.getData('text/plain'));\n      const sourceArray = sourceType === 'party' ? party : my;\n      const targetArray = targetType === 'party' ? party : my;\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\n\n      // 카드 합성 로직\n      if (targetIndex !== null && sourceType === targetType) {\n        const sourceCard = sourceArray[sourceIndex];\n        const targetCard = targetArray[targetIndex];\n\n        // 같은 카드인지 확인 (직업과 등급이 동일)\n        if (sourceIndex !== targetIndex && sourceCard.job === targetCard.job && sourceCard.grade === targetCard.grade) {\n          // 최고 등급이 아닐 경우에만 합성\n          if (sourceCard.grade !== 'SSR') {\n            const newArray = [...sourceArray];\n            // 원본 카드 제거\n            newArray.splice(Math.max(sourceIndex, targetIndex), 1);\n            newArray.splice(Math.min(sourceIndex, targetIndex), 1);\n            // 새로운 상위 등급 카드 추가\n            newArray.push({\n              job: sourceCard.job,\n              grade: getNextGrade(sourceCard.grade),\n              isFlipped: false\n            });\n            setSourceArray(newArray);\n\n            // 합성 성공 메시지\n            alert(`${sourceCard.job} ${sourceCard.grade} 카드 2장이 합성되어 ${getNextGrade(sourceCard.grade)} 등급이 되었습니다!`);\n            return;\n          } else {\n            alert('이미 최고 등급입니다!');\n            return;\n          }\n        }\n      }\n\n      // 기존 드래그 앤 드롭 로직\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\n        alert('파티 인원이 최대입니다.');\n        return;\n      }\n      if (targetIndex !== null) {\n        // 카드 간 이동\n        if (sourceType === targetType) {\n          // 같은 영역 내 이동\n          const newArray = [...sourceArray];\n          const [movedCard] = newArray.splice(sourceIndex, 1);\n          newArray.splice(targetIndex, 0, movedCard);\n          setSourceArray(newArray);\n        } else {\n          // 다른 영역 간 이동\n          const newSourceArray = [...sourceArray];\n          const newTargetArray = [...targetArray];\n          const [movedCard] = newSourceArray.splice(sourceIndex, 1);\n          const [replacedCard] = newTargetArray.splice(targetIndex, 1, movedCard);\n          if (replacedCard) {\n            newSourceArray.splice(sourceIndex, 0, replacedCard);\n          }\n          setSourceArray(newSourceArray);\n          setTargetArray(newTargetArray);\n        }\n      } else {\n        // 영역에 드롭\n        const newSourceArray = [...sourceArray];\n        const [movedCard] = newSourceArray.splice(sourceIndex, 1);\n        setSourceArray(newSourceArray);\n        setTargetArray(prev => [...prev, movedCard]);\n      }\n    } catch (error) {\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\n    }\n  };\n\n  // 가챠 함수 통합\n  const handleGacha = async (useApi = false) => {\n    setIsGachaAnimating(true);\n    try {\n      let newCard;\n      if (useApi) {\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\n        newCard = response.data;\n      } else {\n        newCard = {\n          job: jobs[dice(0, 4)],\n          grade: grade[getLuck()]\n        };\n      }\n      newCard.isFlipped = true;\n      setMy(prev => [...prev, newCard]);\n      setTimeout(() => {\n        setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n          ...card,\n          isFlipped: false\n        } : card));\n      }, 500);\n    } catch (error) {\n      console.error('가챠 실패:', error);\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\n    } finally {\n      setIsGachaAnimating(false);\n    }\n  };\n\n  // 카드 렌더링 함수\n  const renderCards = (cards, type) => {\n    return cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      ...card,\n      onFlip: () => {\n        const setFunction = type === 'party' ? setParty : setMy;\n        setFunction(prev => prev.map((c, idx) => idx === index ? {\n          ...c,\n          isFlipped: !c.isFlipped\n        } : c));\n      },\n      draggable: true,\n      onDragStart: e => handleDragStart(e, type, index),\n      onDragOver: e => e.preventDefault(),\n      onDrop: e => handleDrop(e, type, index),\n      index: index\n    }, `${type}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD30C\\uD2F0 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, 'party'),\n        type: \"party\",\n        children: renderCards(party, 'party')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gacha-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(false),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"\\uB85C\\uCEEC \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(true),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"API \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBCF4\\uC720 \\uCE74\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, 'inventory'),\n        type: \"inventory\",\n        children: renderCards(my, 'inventory')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC804\\uD22C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Battle, {\n        playerParty: party,\n        enemyParty: enemyParty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 493,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"sdIo0WmARNfeRS/safdRLq3tf5Y=\");\n_c4 = App;\nexport default App;\n\n// CSS 추가\nconst styles = `\n.card.merging {\n  animation: merge-glow 0.5s ease-in-out;\n}\n\n@keyframes merge-glow {\n  0% {\n    transform: scale(1);\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\n  }\n  50% {\n    transform: scale(1.1);\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.7);\n  }\n  100% {\n    transform: scale(1);\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\n  }\n}\n`;\n\n// 스타일 태그 추가\nconst styleSheet = document.createElement(\"style\");\nstyleSheet.innerText = styles;\ndocument.head.appendChild(styleSheet);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","useEffect","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","id","_c2","Battle","playerParty","enemyParty","playerPartyName","enemyPartyName","onBattleEnd","_s2","isBattling","setIsBattling","battleLog","setBattleLog","logContainerRef","turnRef","getCardStats","gradeStats","hp","atk","def","eva","stats","maxHp","calculateDamage","attacker","target","damage","max","isCritical","isEvaded","createLogMessage","damageInfo","isPlayerAttack","text","message","groupCards","cards","reduce","acc","key","count","startBattle","playerCards","map","isPlayer","enemyCards","maxTurns","some","Promise","resolve","setTimeout","isPlayerTurn","defender","prev","filter","c","find","playerWon","isDraw","result","renderGroupedCards","groupedCards","Object","values","disabled","log","_c3","getNextGrade","currentGrade","gradeIndex","indexOf","App","_s3","my","setMy","party","setParty","Array","fill","isGachaAnimating","setIsGachaAnimating","handleDragStart","sourceType","dataTransfer","setData","JSON","stringify","handleDrop","targetType","targetIndex","preventDefault","stopPropagation","sourceIndex","parse","getData","sourceArray","targetArray","setSourceArray","setTargetArray","sourceCard","targetCard","newArray","splice","min","push","alert","length","movedCard","newSourceArray","newTargetArray","replacedCard","error","console","handleGacha","useApi","newCard","response","get","data","idx","renderCards","setFunction","_c4","styles","styleSheet","document","createElement","innerText","head","appendChild","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\t\t\t// axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef, useEffect } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\n\r\n// 직업(job)과 등급(grade) 설정\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// Card 컴포넌트 통합\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\r\n  const cardRef = useRef(null);\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'\r\n      }}\r\n      onClick={onFlip}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      draggable={draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e, index)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역\r\nfunction CardArea({ children, onDragOver, onDrop, type }) {\r\n  return (\r\n    <div \r\n      id='card_area'\r\n      className={`card-area ${type}`}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 전투 컴포넌트\r\nfunction Battle({ \r\n  playerParty, \r\n  enemyParty, \r\n  playerPartyName, \r\n  enemyPartyName,\r\n  onBattleEnd \r\n}) {\r\n  const [isBattling, setIsBattling] = useState(false);\r\n  const [battleLog, setBattleLog] = useState([]);\r\n  const logContainerRef = useRef(null);\r\n  const turnRef = useRef(1);\r\n\r\n  // 카드 스탯 계산 함수\r\n  const getCardStats = (card) => {\r\n    const gradeStats = {\r\n      'SSR': { hp: 100, atk: 30, def: 20, eva: 15 },\r\n      'SR': { hp: 85, atk: 25, def: 15, eva: 12 },\r\n      'S': { hp: 70, atk: 20, def: 12, eva: 10 },\r\n      'R': { hp: 60, atk: 15, def: 10, eva: 8 },\r\n      'H': { hp: 50, atk: 12, def: 8, eva: 6 },\r\n      'N': { hp: 40, atk: 10, def: 5, eva: 5 }\r\n    };\r\n\r\n    const stats = gradeStats[card.grade];\r\n    return {\r\n      ...stats,\r\n      maxHp: stats.hp,\r\n      hp: stats.hp\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수\r\n  const calculateDamage = (attacker, target) => {\r\n    const damage = Math.max(1, attacker.atk - target.def);\r\n    const isCritical = Math.random() < 0.2;\r\n    const isEvaded = Math.random() * 100 < target.eva;\r\n\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    return {\r\n      damage: isCritical ? Math.floor(damage * 1.5) : damage,\r\n      isCritical,\r\n      isEvaded: false\r\n    };\r\n  };\r\n\r\n  // 로그 메시지 생성 함수\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${target.job}(${target.grade})가 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'player-miss' : 'enemy-miss'\r\n      };\r\n    }\r\n\r\n    const message = damageInfo.isCritical\r\n      ? `치명타! ${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지!`\r\n      : `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지!`;\r\n\r\n    return {\r\n      text: `${message} (HP: ${target.hp}/${target.maxHp})`,\r\n      type: isPlayerAttack\r\n        ? (damageInfo.isCritical ? 'player-critical' : 'player-attack')\r\n        : (damageInfo.isCritical ? 'enemy-critical' : 'enemy-attack')\r\n    };\r\n  };\r\n\r\n  // 카드 그룹화 함수\r\n  const groupCards = (cards) => {\r\n    return cards.reduce((acc, card) => {\r\n      const key = `${card.job}-${card.grade}`;\r\n      if (!acc[key]) {\r\n        acc[key] = { ...card, count: 1 };\r\n      } else {\r\n        acc[key].count++;\r\n      }\r\n      return acc;\r\n    }, {});\r\n  };\r\n\r\n  // 전투 시작 함수\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n    turnRef.current = 1;\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    const maxTurns = 30;\r\n\r\n    while (\r\n      playerCards.some(card => card.hp > 0) && \r\n      enemyCards.some(card => card.hp > 0) && \r\n      turnRef.current <= maxTurns\r\n    ) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const isPlayerTurn = turnRef.current % 2 === 1;\r\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\r\n      const defender = isPlayerTurn ? enemyCards : playerCards;\r\n\r\n      setBattleLog(prev => [...prev, { \r\n        text: `${turnRef.current}턴: ${isPlayerTurn ? playerPartyName : enemyPartyName} 턴 시작!`, \r\n        type: 'turn-start' \r\n      }]);\r\n\r\n      for (const card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damageInfo = calculateDamage(card, target);\r\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n          setBattleLog(prev => [...prev, \r\n            createLogMessage(card, target, damageInfo, isPlayerTurn)\r\n          ]);\r\n\r\n          await new Promise(resolve => setTimeout(resolve, 300));\r\n        }\r\n      }\r\n\r\n      turnRef.current += 1;\r\n    }\r\n\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    const isDraw = turnRef.current > maxTurns;\r\n\r\n    setBattleLog(prev => [...prev, { \r\n      text: isDraw ? '무승부!' : (playerWon ? `${playerPartyName}의 승리!` : `${enemyPartyName}의 승리!`),\r\n      type: isDraw ? 'draw' : (playerWon ? 'victory' : 'defeat')\r\n    }]);\r\n\r\n    setIsBattling(false);\r\n    \r\n    if (onBattleEnd) {\r\n      onBattleEnd({\r\n        result: isDraw ? 'draw' : (playerWon ? 'victory' : 'defeat'),\r\n        playerCards,\r\n        enemyCards\r\n      });\r\n    }\r\n  };\r\n\r\n  // 그룹화된 카드 렌더링 함수\r\n  const renderGroupedCards = (cards, isPlayer) => {\r\n    const groupedCards = groupCards(cards);\r\n    return (\r\n      <div className={`card-group ${isPlayer ? 'player' : 'enemy'}`}>\r\n        {Object.values(groupedCards).map((card, index) => (\r\n          <div key={index} className=\"card-stack\">\r\n            <div className={`battle-card ${isPlayer ? 'player' : 'enemy'}`}>\r\n              <div className=\"card-info\">\r\n                <span className=\"card-job\">{card.job}</span>\r\n                <span className=\"card-grade\">{card.grade}</span>\r\n                {card.count > 1 && (\r\n                  <span className=\"card-count\">x{card.count}</span>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-header\">\r\n        <div className=\"party-name player\">{playerPartyName}</div>\r\n        <div className=\"vs\">VS</div>\r\n        <div className=\"party-name enemy\">{enemyPartyName}</div>\r\n      </div>\r\n\r\n      <div className=\"battle-field\">\r\n        <div className=\"player-field\">\r\n          {renderGroupedCards(playerParty, true)}\r\n        </div>\r\n        <div className=\"enemy-field\">\r\n          {renderGroupedCards(enemyParty, false)}\r\n        </div>\r\n      </div>\r\n      \r\n      <button \r\n        onClick={startBattle} \r\n        disabled={isBattling}\r\n        className={`battle-button ${isBattling ? 'disabled' : ''}`}\r\n      >\r\n        {isBattling ? '전투 중...' : '전투 시작'}\r\n      </button>\r\n\r\n      <div ref={logContainerRef} className=\"battle-log\">\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className={`log-entry ${log.type}`}>\r\n            {log.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드 등급 상승 함수 추가\r\nconst getNextGrade = (currentGrade) => {\r\n  const gradeIndex = grade.indexOf(currentGrade);\r\n  return gradeIndex > 0 ? grade[gradeIndex - 1] : currentGrade; // 더 높은 등급으로\r\n};\r\n\r\nfunction App() {\r\n  const [my, setMy] = useState([]);\r\n  const [party, setParty] = useState([\r\n    { job: '전사', grade: 'SSR', isFlipped: false },\r\n    { job: '마법사', grade: 'SR', isFlipped: false },\r\n    { job: '궁수', grade: 'S', isFlipped: false },\r\n    { job: '전사', grade: 'R', isFlipped: false },\r\n    { job: '궁수', grade: 'H', isFlipped: false }\r\n  ]);\r\n  \r\n  // 적 파티 상태 추가 - 랜덤하게 생성\r\n  const [enemyParty] = useState(() => {\r\n    return Array(5).fill(null).map(() => ({\r\n      job: jobs[dice(0, 4)],\r\n      grade: grade[getLuck()],\r\n      isFlipped: false\r\n    }));\r\n  });\r\n  \r\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\r\n\r\n  // 드래그 앤 드롭 핸들러 통합\r\n  const handleDragStart = (e, sourceType, index) => {\r\n    e.dataTransfer.setData('text/plain', JSON.stringify({ type: sourceType, index }));\r\n  };\r\n\r\n  // 드롭 처리 통합 함수 수정\r\n  const handleDrop = (e, targetType, targetIndex = null) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    try {\r\n      const { type: sourceType, index: sourceIndex } = JSON.parse(e.dataTransfer.getData('text/plain'));\r\n      const sourceArray = sourceType === 'party' ? party : my;\r\n      const targetArray = targetType === 'party' ? party : my;\r\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\r\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\r\n\r\n      // 카드 합성 로직\r\n      if (targetIndex !== null && sourceType === targetType) {\r\n        const sourceCard = sourceArray[sourceIndex];\r\n        const targetCard = targetArray[targetIndex];\r\n\r\n        // 같은 카드인지 확인 (직업과 등급이 동일)\r\n        if (sourceIndex !== targetIndex && \r\n            sourceCard.job === targetCard.job && \r\n            sourceCard.grade === targetCard.grade) {\r\n          \r\n          // 최고 등급이 아닐 경우에만 합성\r\n          if (sourceCard.grade !== 'SSR') {\r\n            const newArray = [...sourceArray];\r\n            // 원본 카드 제거\r\n            newArray.splice(Math.max(sourceIndex, targetIndex), 1);\r\n            newArray.splice(Math.min(sourceIndex, targetIndex), 1);\r\n            // 새로운 상위 등급 카드 추가\r\n            newArray.push({\r\n              job: sourceCard.job,\r\n              grade: getNextGrade(sourceCard.grade),\r\n              isFlipped: false\r\n            });\r\n            setSourceArray(newArray);\r\n            \r\n            // 합성 성공 메시지\r\n            alert(`${sourceCard.job} ${sourceCard.grade} 카드 2장이 합성되어 ${getNextGrade(sourceCard.grade)} 등급이 되었습니다!`);\r\n            return;\r\n          } else {\r\n            alert('이미 최고 등급입니다!');\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n      // 기존 드래그 앤 드롭 로직\r\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\r\n        alert('파티 인원이 최대입니다.');\r\n        return;\r\n      }\r\n\r\n      if (targetIndex !== null) {\r\n        // 카드 간 이동\r\n        if (sourceType === targetType) {\r\n          // 같은 영역 내 이동\r\n          const newArray = [...sourceArray];\r\n          const [movedCard] = newArray.splice(sourceIndex, 1);\r\n          newArray.splice(targetIndex, 0, movedCard);\r\n          setSourceArray(newArray);\r\n        } else {\r\n          // 다른 영역 간 이동\r\n          const newSourceArray = [...sourceArray];\r\n          const newTargetArray = [...targetArray];\r\n          const [movedCard] = newSourceArray.splice(sourceIndex, 1);\r\n          const [replacedCard] = newTargetArray.splice(targetIndex, 1, movedCard);\r\n          \r\n          if (replacedCard) {\r\n            newSourceArray.splice(sourceIndex, 0, replacedCard);\r\n          }\r\n          \r\n          setSourceArray(newSourceArray);\r\n          setTargetArray(newTargetArray);\r\n        }\r\n      } else {\r\n        // 영역에 드롭\r\n        const newSourceArray = [...sourceArray];\r\n        const [movedCard] = newSourceArray.splice(sourceIndex, 1);\r\n        setSourceArray(newSourceArray);\r\n        setTargetArray(prev => [...prev, movedCard]);\r\n      }\r\n    } catch (error) {\r\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\r\n    }\r\n  };\r\n\r\n  // 가챠 함수 통합\r\n  const handleGacha = async (useApi = false) => {\r\n    setIsGachaAnimating(true);\r\n    \r\n    try {\r\n      let newCard;\r\n      if (useApi) {\r\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\r\n        newCard = response.data;\r\n      } else {\r\n        newCard = {\r\n          job: jobs[dice(0, 4)],\r\n          grade: grade[getLuck()]\r\n        };\r\n      }\r\n      \r\n      newCard.isFlipped = true;\r\n      setMy(prev => [...prev, newCard]);\r\n      \r\n      setTimeout(() => {\r\n        setMy(prev => prev.map((card, idx) => \r\n          idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n        ));\r\n      }, 500);\r\n      \r\n    } catch (error) {\r\n      console.error('가챠 실패:', error);\r\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\r\n    } finally {\r\n      setIsGachaAnimating(false);\r\n    }\r\n  };\r\n\r\n  // 카드 렌더링 함수\r\n  const renderCards = (cards, type) => {\r\n    return cards.map((card, index) => (\r\n      <Card \r\n        key={`${type}-${index}`}\r\n        {...card}\r\n        onFlip={() => {\r\n          const setFunction = type === 'party' ? setParty : setMy;\r\n          setFunction(prev => prev.map((c, idx) => \r\n            idx === index ? {...c, isFlipped: !c.isFlipped} : c\r\n          ));\r\n        }}\r\n        draggable={true}\r\n        onDragStart={(e) => handleDragStart(e, type, index)}\r\n        onDragOver={(e) => e.preventDefault()}\r\n        onDrop={(e) => handleDrop(e, type, index)}\r\n        index={index}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"battle-area\">\r\n        <h2>파티 1</h2>\r\n        <CardArea \r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, 'party')}\r\n          type=\"party\"\r\n        >\r\n          {renderCards(party, 'party')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"gacha-area\">\r\n        <h2>가챠</h2>\r\n        <button \r\n          onClick={() => handleGacha(false)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          로컬 가챠\r\n        </button>\r\n        <button \r\n          onClick={() => handleGacha(true)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          API 가챠\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"inventory\">\r\n        <h2>보유 카드</h2>\r\n        <CardArea \r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, 'inventory')}\r\n          type=\"inventory\"\r\n        >\r\n          {renderCards(my, 'inventory')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"battle-section\">\r\n        <h2>전투</h2>\r\n        <Battle playerParty={party} enemyParty={enemyParty} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n// CSS 추가\r\nconst styles = `\r\n.card.merging {\r\n  animation: merge-glow 0.5s ease-in-out;\r\n}\r\n\r\n@keyframes merge-glow {\r\n  0% {\r\n    transform: scale(1);\r\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\r\n  }\r\n  50% {\r\n    transform: scale(1.1);\r\n    box-shadow: 0 0 20px rgba(255, 215, 0, 0.7);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n    box-shadow: 0 0 0 rgba(255, 215, 0, 0);\r\n  }\r\n}\r\n`;\r\n\r\n// 스타일 태그 추가\r\nconst styleSheet = document.createElement(\"style\");\r\nstyleSheet.innerText = styles;\r\ndocument.head.appendChild(styleSheet);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}