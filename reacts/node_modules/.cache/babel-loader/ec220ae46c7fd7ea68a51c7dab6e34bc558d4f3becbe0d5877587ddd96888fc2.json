{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\n\n// 직업(job)과 등급(grade) 설정\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\n\n// 카드 등급에 따른 확률 계산 함수\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\n\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// Card 컴포넌트 통합\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const cardRef = useRef(null);\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s'\n    },\n    onClick: onFlip,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e, index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n// 카드들을 묶어서 보여주는 영역\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  onDragOver,\n  onDrop,\n  type\n}) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card_area\",\n    className: `card-area ${type}`,\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n// 전투 컴포넌트\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty\n}) {\n  _s2();\n  const [battleLog, setBattleLog] = useState([]); // 전투 로그\n  const [currentTurn, setCurrentTurn] = useState(1); // 현재 턴\n  const [isBattling, setIsBattling] = useState(false); // 전투 진행 여부\n\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\n  const calculateDamage = (attacker, defender) => {\n    // 크리티컬 확률 (15%)\n    const isCritical = Math.random() < 0.15;\n    // 회피 확률 (10%)\n    const isEvaded = Math.random() < 0.10;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    let damage = Math.max(1, attacker.atk - defender.def);\n    if (isCritical) {\n      damage = Math.floor(damage * 1.5);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n\n  // 로그 메시지 생성 함수 수정\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\n      };\n    }\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\n    if (damageInfo.isCritical) {\n      message = `크리티컬! ${message}`;\n    }\n    message += ` (${target.hp}/${target.maxHp})`;\n    return {\n      text: message,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt' : damageInfo.isCritical ? 'critical-taken' : 'damage-taken'\n    };\n  };\n\n  // 전투 시작 함수 수정\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    const maxTurns = 30; // 최대 턴 수 제한\n\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= maxTurns) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const isPlayerTurn = turn % 2 === 1;\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\n      const defender = isPlayerTurn ? enemyCards : playerCards;\n      setBattleLog(prev => [...prev, {\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`,\n        type: 'turn-start'\n      }]);\n      for (let card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damageInfo = calculateDamage(card, target);\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\n          setBattleLog(prev => [...prev, createLogMessage(card, target, damageInfo, isPlayerTurn)]);\n        }\n      }\n      setCurrentTurn(turn);\n      turn++;\n    }\n\n    // 승패 판정\n    const playerWon = playerCards.some(card => card.hp > 0);\n    setBattleLog(prev => [...prev, {\n      text: playerWon ? '플레이어의 승리!' : '적의 승리!',\n      type: playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-area\",\n        children: enemyParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `enemy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-area\",\n        children: playerParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card\n        }, `player-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startBattle,\n        disabled: isBattling,\n        className: \"battle-button\",\n        children: \"\\uC804\\uD22C \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-counter\",\n        children: [\"\\uD134: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-log\",\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 245,\n    columnNumber: 5\n  }, this);\n}\n_s2(Battle, \"mpltea7vom6N9mYm3cZdMBjWO7Y=\");\n_c3 = Battle;\nfunction App() {\n  _s3();\n  const [my, setMy] = useState([]);\n  const [party, setParty] = useState([{\n    job: '전사',\n    grade: 'SSR',\n    isFlipped: false\n  }, {\n    job: '마법사',\n    grade: 'SR',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'S',\n    isFlipped: false\n  }, {\n    job: '전사',\n    grade: 'R',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'H',\n    isFlipped: false\n  }]);\n\n  // 적 파티 상태 추가 - 랜덤하게 생성\n  const [enemyParty] = useState(() => {\n    return Array(5).fill(null).map(() => ({\n      job: jobs[dice(0, 4)],\n      grade: grade[getLuck()],\n      isFlipped: false\n    }));\n  });\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\n\n  // 드래그 앤 드롭 핸들러 통합\n  const handleDragStart = (e, sourceType, index) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      type: sourceType,\n      index\n    }));\n  };\n\n  // 드롭 처리 통합 함수\n  const handleDrop = (e, targetType, targetIndex = null) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      const {\n        type: sourceType,\n        index: sourceIndex\n      } = JSON.parse(e.dataTransfer.getData('text/plain'));\n      const sourceArray = sourceType === 'party' ? party : my;\n      const targetArray = targetType === 'party' ? party : my;\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\n\n      // 파티 최대 인원 체크\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\n        alert('파티 인원이 최대입니다.');\n        return;\n      }\n      if (targetIndex !== null) {\n        // 카드 간 이동\n        if (sourceType === targetType) {\n          // 같은 영역 내 이동\n          const newArray = [...sourceArray];\n          const [movedCard] = newArray.splice(sourceIndex, 1);\n          newArray.splice(targetIndex, 0, movedCard);\n          setSourceArray(newArray);\n        } else {\n          // 다른 영역 간 이동\n          const newSourceArray = [...sourceArray];\n          const newTargetArray = [...targetArray];\n          const [movedCard] = newSourceArray.splice(sourceIndex, 1);\n          const [replacedCard] = newTargetArray.splice(targetIndex, 1, movedCard);\n          if (replacedCard) {\n            newSourceArray.splice(sourceIndex, 0, replacedCard);\n          }\n          setSourceArray(newSourceArray);\n          setTargetArray(newTargetArray);\n        }\n      } else {\n        // 영역에 드롭\n        const newSourceArray = [...sourceArray];\n        const [movedCard] = newSourceArray.splice(sourceIndex, 1);\n        setSourceArray(newSourceArray);\n        setTargetArray(prev => [...prev, movedCard]);\n      }\n    } catch (error) {\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\n    }\n  };\n\n  // 가챠 함수 통합\n  const handleGacha = async (useApi = false) => {\n    setIsGachaAnimating(true);\n    try {\n      let newCard;\n      if (useApi) {\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\n        newCard = response.data;\n      } else {\n        newCard = {\n          job: jobs[dice(0, 4)],\n          grade: grade[getLuck()]\n        };\n      }\n      newCard.isFlipped = true;\n      setMy(prev => [...prev, newCard]);\n      setTimeout(() => {\n        setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n          ...card,\n          isFlipped: false\n        } : card));\n      }, 500);\n    } catch (error) {\n      console.error('가챠 실패:', error);\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\n    } finally {\n      setIsGachaAnimating(false);\n    }\n  };\n\n  // 카드 렌더링 함수\n  const renderCards = (cards, type) => {\n    return cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      ...card,\n      onFlip: () => {\n        const setFunction = type === 'party' ? setParty : setMy;\n        setFunction(prev => prev.map((c, idx) => idx === index ? {\n          ...c,\n          isFlipped: !c.isFlipped\n        } : c));\n      },\n      draggable: true,\n      onDragStart: e => handleDragStart(e, type, index),\n      onDragOver: e => e.preventDefault(),\n      onDrop: e => handleDrop(e, type, index),\n      index: index\n    }, `${type}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD30C\\uD2F0 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, 'party'),\n        type: \"party\",\n        children: renderCards(party, 'party')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 415,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gacha-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(false),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"\\uB85C\\uCEEC \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(true),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"API \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBCF4\\uC720 \\uCE74\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        onDragOver: e => e.preventDefault(),\n        onDrop: e => handleDrop(e, 'inventory'),\n        type: \"inventory\",\n        children: renderCards(my, 'inventory')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC804\\uD22C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Battle, {\n        playerParty: party,\n        enemyParty: enemyParty\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"sdIo0WmARNfeRS/safdRLq3tf5Y=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","id","_c2","Battle","playerParty","enemyParty","_s2","battleLog","setBattleLog","currentTurn","setCurrentTurn","isBattling","setIsBattling","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","isCritical","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","text","message","startBattle","playerCards","map","isPlayer","enemyCards","turn","maxTurns","some","Promise","resolve","setTimeout","isPlayerTurn","prev","filter","c","find","playerWon","disabled","log","_c3","App","_s3","my","setMy","party","setParty","Array","fill","isGachaAnimating","setIsGachaAnimating","handleDragStart","sourceType","dataTransfer","setData","JSON","stringify","handleDrop","targetType","targetIndex","preventDefault","stopPropagation","sourceIndex","parse","getData","sourceArray","targetArray","setSourceArray","setTargetArray","length","alert","newArray","movedCard","splice","newSourceArray","newTargetArray","replacedCard","error","console","handleGacha","useApi","newCard","response","get","data","idx","renderCards","cards","setFunction","_c4","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\t\t\t// axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\n\r\n// 직업(job)과 등급(grade) 설정\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\n// 카드 등급에 따른 확률 계산 함수\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\n// 주사위처럼 숫자 범위 내에서 랜덤 값을 반환하는 함수\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// Card 컴포넌트 통합\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\r\n  const cardRef = useRef(null);\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'\r\n      }}\r\n      onClick={onFlip}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      draggable={draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e, index)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// 카드들을 묶어서 보여주는 영역\r\nfunction CardArea({ children, onDragOver, onDrop, type }) {\r\n  return (\r\n    <div \r\n      id='card_area'\r\n      className={`card-area ${type}`}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// 전투 컴포넌트\r\nfunction Battle({ playerParty, enemyParty }) {\r\n  const [battleLog, setBattleLog] = useState([]);  // 전투 로그\r\n  const [currentTurn, setCurrentTurn] = useState(1);  // 현재 턴\r\n  const [isBattling, setIsBattling] = useState(false);  // 전투 진행 여부\r\n\r\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\r\n  const calculateDamage = (attacker, defender) => {\r\n    // 크리티컬 확률 (15%)\r\n    const isCritical = Math.random() < 0.15;\r\n    // 회피 확률 (10%)\r\n    const isEvaded = Math.random() < 0.10;\r\n\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    let damage = Math.max(1, attacker.atk - defender.def);\r\n    if (isCritical) {\r\n      damage = Math.floor(damage * 1.5);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false };\r\n  };\r\n\r\n  // 로그 메시지 생성 함수 수정\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\r\n      };\r\n    }\r\n\r\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\r\n    if (damageInfo.isCritical) {\r\n      message = `크리티컬! ${message}`;\r\n    }\r\n    message += ` (${target.hp}/${target.maxHp})`;\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? \r\n        (damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt') : \r\n        (damageInfo.isCritical ? 'critical-taken' : 'damage-taken')\r\n    };\r\n  };\r\n\r\n  // 전투 시작 함수 수정\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    const maxTurns = 30; // 최대 턴 수 제한\r\n\r\n    while (playerCards.some(card => card.hp > 0) && \r\n           enemyCards.some(card => card.hp > 0) && \r\n           turn <= maxTurns) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const isPlayerTurn = turn % 2 === 1;\r\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\r\n      const defender = isPlayerTurn ? enemyCards : playerCards;\r\n\r\n      setBattleLog(prev => [...prev, { \r\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`, \r\n        type: 'turn-start' \r\n      }]);\r\n\r\n      for (let card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damageInfo = calculateDamage(card, target);\r\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n          setBattleLog(prev => [...prev, \r\n            createLogMessage(card, target, damageInfo, isPlayerTurn)\r\n          ]);\r\n        }\r\n      }\r\n\r\n      setCurrentTurn(turn);\r\n      turn++;\r\n    }\r\n\r\n    // 승패 판정\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    setBattleLog(prev => [...prev, { \r\n      text: playerWon ? '플레이어의 승리!' : '적의 승리!',\r\n      type: playerWon ? 'victory' : 'defeat'\r\n    }]);\r\n    setIsBattling(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-field\">\r\n        <div className=\"enemy-area\">\r\n          {enemyParty.map((card, index) => (\r\n            <Card key={`enemy-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n        <div className=\"player-area\">\r\n          {playerParty.map((card, index) => (\r\n            <Card key={`player-${index}`} {...card} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"battle-controls\">\r\n        <button \r\n          onClick={startBattle} \r\n          disabled={isBattling}\r\n          className=\"battle-button\"\r\n        >\r\n          전투 시작\r\n        </button>\r\n        <div className=\"turn-counter\">턴: {currentTurn}</div>\r\n      </div>\r\n\r\n      <div className=\"battle-log\">\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className={`log-entry ${log.type}`}>\r\n            {log.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction App() {\r\n  const [my, setMy] = useState([]);\r\n  const [party, setParty] = useState([\r\n    { job: '전사', grade: 'SSR', isFlipped: false },\r\n    { job: '마법사', grade: 'SR', isFlipped: false },\r\n    { job: '궁수', grade: 'S', isFlipped: false },\r\n    { job: '전사', grade: 'R', isFlipped: false },\r\n    { job: '궁수', grade: 'H', isFlipped: false }\r\n  ]);\r\n  \r\n  // 적 파티 상태 추가 - 랜덤하게 생성\r\n  const [enemyParty] = useState(() => {\r\n    return Array(5).fill(null).map(() => ({\r\n      job: jobs[dice(0, 4)],\r\n      grade: grade[getLuck()],\r\n      isFlipped: false\r\n    }));\r\n  });\r\n  \r\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\r\n\r\n  // 드래그 앤 드롭 핸들러 통합\r\n  const handleDragStart = (e, sourceType, index) => {\r\n    e.dataTransfer.setData('text/plain', JSON.stringify({ type: sourceType, index }));\r\n  };\r\n\r\n  // 드롭 처리 통합 함수\r\n  const handleDrop = (e, targetType, targetIndex = null) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    try {\r\n      const { type: sourceType, index: sourceIndex } = JSON.parse(e.dataTransfer.getData('text/plain'));\r\n      const sourceArray = sourceType === 'party' ? party : my;\r\n      const targetArray = targetType === 'party' ? party : my;\r\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\r\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\r\n\r\n      // 파티 최대 인원 체크\r\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\r\n        alert('파티 인원이 최대입니다.');\r\n        return;\r\n      }\r\n\r\n      if (targetIndex !== null) {\r\n        // 카드 간 이동\r\n        if (sourceType === targetType) {\r\n          // 같은 영역 내 이동\r\n          const newArray = [...sourceArray];\r\n          const [movedCard] = newArray.splice(sourceIndex, 1);\r\n          newArray.splice(targetIndex, 0, movedCard);\r\n          setSourceArray(newArray);\r\n        } else {\r\n          // 다른 영역 간 이동\r\n          const newSourceArray = [...sourceArray];\r\n          const newTargetArray = [...targetArray];\r\n          const [movedCard] = newSourceArray.splice(sourceIndex, 1);\r\n          const [replacedCard] = newTargetArray.splice(targetIndex, 1, movedCard);\r\n          \r\n          if (replacedCard) {\r\n            newSourceArray.splice(sourceIndex, 0, replacedCard);\r\n          }\r\n          \r\n          setSourceArray(newSourceArray);\r\n          setTargetArray(newTargetArray);\r\n        }\r\n      } else {\r\n        // 영역에 드롭\r\n        const newSourceArray = [...sourceArray];\r\n        const [movedCard] = newSourceArray.splice(sourceIndex, 1);\r\n        setSourceArray(newSourceArray);\r\n        setTargetArray(prev => [...prev, movedCard]);\r\n      }\r\n    } catch (error) {\r\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\r\n    }\r\n  };\r\n\r\n  // 가챠 함수 통합\r\n  const handleGacha = async (useApi = false) => {\r\n    setIsGachaAnimating(true);\r\n    \r\n    try {\r\n      let newCard;\r\n      if (useApi) {\r\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\r\n        newCard = response.data;\r\n      } else {\r\n        newCard = {\r\n          job: jobs[dice(0, 4)],\r\n          grade: grade[getLuck()]\r\n        };\r\n      }\r\n      \r\n      newCard.isFlipped = true;\r\n      setMy(prev => [...prev, newCard]);\r\n      \r\n      setTimeout(() => {\r\n        setMy(prev => prev.map((card, idx) => \r\n          idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n        ));\r\n      }, 500);\r\n      \r\n    } catch (error) {\r\n      console.error('가챠 실패:', error);\r\n      alert('카드 뽑기에 실패했습니다. 다시 시도해주세요.');\r\n    } finally {\r\n      setIsGachaAnimating(false);\r\n    }\r\n  };\r\n\r\n  // 카드 렌더링 함수\r\n  const renderCards = (cards, type) => {\r\n    return cards.map((card, index) => (\r\n      <Card \r\n        key={`${type}-${index}`}\r\n        {...card}\r\n        onFlip={() => {\r\n          const setFunction = type === 'party' ? setParty : setMy;\r\n          setFunction(prev => prev.map((c, idx) => \r\n            idx === index ? {...c, isFlipped: !c.isFlipped} : c\r\n          ));\r\n        }}\r\n        draggable={true}\r\n        onDragStart={(e) => handleDragStart(e, type, index)}\r\n        onDragOver={(e) => e.preventDefault()}\r\n        onDrop={(e) => handleDrop(e, type, index)}\r\n        index={index}\r\n      />\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"battle-area\">\r\n        <h2>파티 1</h2>\r\n        <CardArea \r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, 'party')}\r\n          type=\"party\"\r\n        >\r\n          {renderCards(party, 'party')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"gacha-area\">\r\n        <h2>가챠</h2>\r\n        <button \r\n          onClick={() => handleGacha(false)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          로컬 가챠\r\n        </button>\r\n        <button \r\n          onClick={() => handleGacha(true)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          API 가챠\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"inventory\">\r\n        <h2>보유 카드</h2>\r\n        <CardArea \r\n          onDragOver={(e) => e.preventDefault()}\r\n          onDrop={(e) => handleDrop(e, 'inventory')}\r\n          type=\"inventory\"\r\n        >\r\n          {renderCards(my, 'inventory')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"battle-section\">\r\n        <h2>전투</h2>\r\n        <Battle playerParty={party} enemyParty={enemyParty} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}