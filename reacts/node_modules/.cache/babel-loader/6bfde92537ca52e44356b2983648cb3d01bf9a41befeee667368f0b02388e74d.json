{"ast":null,"code":"// ... existing code ...\n\nfunction Battle({\n  playerParty,\n  enemyParty\n}) {\n  // ... existing state declarations ...\n\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\n  const calculateDamage = (attacker, defender) => {\n    // 크리티컬 확률 (15%)\n    const isCritical = Math.random() < 0.15;\n    // 회피 확률 (10%)\n    const isEvaded = Math.random() < 0.10;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true\n      };\n    }\n    let damage = Math.max(1, attacker.atk - defender.def);\n    if (isCritical) {\n      damage = Math.floor(damage * 1.5);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false\n    };\n  };\n\n  // 로그 메시지 생성 함수 수정\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    if (damageInfo.isEvaded) {\n      return {\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\n      };\n    }\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\n    if (damageInfo.isCritical) {\n      message = `크리티컬! ${message}`;\n    }\n    message += ` (${target.hp}/${target.maxHp})`;\n    return {\n      text: message,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt' : damageInfo.isCritical ? 'critical-taken' : 'damage-taken'\n    };\n  };\n\n  // 전투 시작 함수 수정\n  const startBattle = async () => {\n    setIsBattling(true);\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    let turn = 1;\n    const maxTurns = 30; // 최대 턴 수 제한\n\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= maxTurns) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      const isPlayerTurn = turn % 2 === 1;\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\n      const defender = isPlayerTurn ? enemyCards : playerCards;\n      setBattleLog(prev => [...prev, {\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`,\n        type: 'turn-start'\n      }]);\n      for (let card of attacker.filter(c => c.hp > 0)) {\n        const target = defender.find(c => c.hp > 0);\n        if (target) {\n          const damageInfo = calculateDamage(card, target);\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\n          setBattleLog(prev => [...prev, createLogMessage(card, target, damageInfo, isPlayerTurn)]);\n\n          // 잠시 대기하여 로그를 읽을 수 있게 함\n          await new Promise(resolve => setTimeout(resolve, 300));\n        }\n      }\n      setCurrentTurn(turn);\n      turn++;\n    }\n\n    // 승패 판정\n    const playerWon = playerCards.some(card => card.hp > 0);\n    const isDraw = turn > maxTurns;\n    setBattleLog(prev => [...prev, {\n      text: isDraw ? '무승부!' : playerWon ? '플레이어의 승리!' : '적의 승리!',\n      type: isDraw ? 'draw' : playerWon ? 'victory' : 'defeat'\n    }]);\n    setIsBattling(false);\n  };\n\n  // ... rest of the component\n}\n_c = Battle;\nvar _c;\n$RefreshReg$(_c, \"Battle\");","map":{"version":3,"names":["Battle","playerParty","enemyParty","getCardStats","card","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","grade","multiplier","job","Math","floor","maxHp","calculateDamage","attacker","defender","isCritical","random","isEvaded","damage","max","createLogMessage","target","damageInfo","isPlayerAttack","text","type","message","startBattle","setIsBattling","setBattleLog","playerCards","map","isPlayer","enemyCards","turn","maxTurns","some","Promise","resolve","setTimeout","isPlayerTurn","prev","filter","c","find","setCurrentTurn","playerWon","isDraw","_c","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["// ... existing code ...\r\n\r\nfunction Battle({ playerParty, enemyParty }) {\r\n  // ... existing state declarations ...\r\n\r\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수 추가 - 크리티컬과 회피 시스템 추가\r\n  const calculateDamage = (attacker, defender) => {\r\n    // 크리티컬 확률 (15%)\r\n    const isCritical = Math.random() < 0.15;\r\n    // 회피 확률 (10%)\r\n    const isEvaded = Math.random() < 0.10;\r\n\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true };\r\n    }\r\n\r\n    let damage = Math.max(1, attacker.atk - defender.def);\r\n    if (isCritical) {\r\n      damage = Math.floor(damage * 1.5);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false };\r\n  };\r\n\r\n  // 로그 메시지 생성 함수 수정\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: `${target.job}(${target.grade})가 ${attacker.job}(${attacker.grade})의 공격을 회피했습니다!`,\r\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\r\n      };\r\n    }\r\n\r\n    let message = `${attacker.job}(${attacker.grade})가 ${target.job}(${target.grade})에게 ${damageInfo.damage} 데미지를 입혔습니다!`;\r\n    if (damageInfo.isCritical) {\r\n      message = `크리티컬! ${message}`;\r\n    }\r\n    message += ` (${target.hp}/${target.maxHp})`;\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? \r\n        (damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt') : \r\n        (damageInfo.isCritical ? 'critical-taken' : 'damage-taken')\r\n    };\r\n  };\r\n\r\n  // 전투 시작 함수 수정\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    let turn = 1;\r\n    const maxTurns = 30; // 최대 턴 수 제한\r\n\r\n    while (playerCards.some(card => card.hp > 0) && \r\n           enemyCards.some(card => card.hp > 0) && \r\n           turn <= maxTurns) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      const isPlayerTurn = turn % 2 === 1;\r\n      const attacker = isPlayerTurn ? playerCards : enemyCards;\r\n      const defender = isPlayerTurn ? enemyCards : playerCards;\r\n\r\n      setBattleLog(prev => [...prev, { \r\n        text: `${isPlayerTurn ? '플레이어' : '적'} 턴 시작!`, \r\n        type: 'turn-start' \r\n      }]);\r\n\r\n      for (let card of attacker.filter(c => c.hp > 0)) {\r\n        const target = defender.find(c => c.hp > 0);\r\n        if (target) {\r\n          const damageInfo = calculateDamage(card, target);\r\n          target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n          setBattleLog(prev => [...prev, \r\n            createLogMessage(card, target, damageInfo, isPlayerTurn)\r\n          ]);\r\n\r\n          // 잠시 대기하여 로그를 읽을 수 있게 함\r\n          await new Promise(resolve => setTimeout(resolve, 300));\r\n        }\r\n      }\r\n\r\n      setCurrentTurn(turn);\r\n      turn++;\r\n    }\r\n\r\n    // 승패 판정\r\n    const playerWon = playerCards.some(card => card.hp > 0);\r\n    const isDraw = turn > maxTurns;\r\n\r\n    setBattleLog(prev => [...prev, { \r\n      text: isDraw ? '무승부!' : (playerWon ? '플레이어의 승리!' : '적의 승리!'),\r\n      type: isDraw ? 'draw' : (playerWon ? 'victory' : 'defeat')\r\n    }]);\r\n    setIsBattling(false);\r\n  };\r\n\r\n  // ... rest of the component\r\n}"],"mappings":"AAAA;;AAEA,SAASA,MAAMA,CAAC;EAAEC,WAAW;EAAEC;AAAW,CAAC,EAAE;EAC3C;;EAEA;EACA,MAAMC,YAAY,GAAIC,IAAI,IAAK;IAC7B,MAAMC,SAAS,GAAG;MAChBC,GAAG,EAAE;QAAEC,EAAE,EAAE,GAAG;QAAEC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC;MAClCC,EAAE,EAAE;QAAEH,EAAE,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC;MAChCE,CAAC,EAAE;QAAEJ,EAAE,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAG,CAAC;MAC/BG,CAAC,EAAE;QAAEL,EAAE,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAE,CAAC;MAC9BI,CAAC,EAAE;QAAEN,EAAE,EAAE,EAAE;QAAEC,GAAG,EAAE,EAAE;QAAEC,GAAG,EAAE;MAAE,CAAC;MAC9BK,CAAC,EAAE;QAAEP,EAAE,EAAE,EAAE;QAAEC,GAAG,EAAE,CAAC;QAAEC,GAAG,EAAE;MAAE;IAC9B,CAAC;IAED,MAAMM,cAAc,GAAG;MACrBC,EAAE,EAAE;QAAET,EAAE,EAAE,GAAG;QAAEC,GAAG,EAAE,GAAG;QAAEC,GAAG,EAAE;MAAI,CAAC;MACnCQ,GAAG,EAAE;QAAEV,EAAE,EAAE,GAAG;QAAEC,GAAG,EAAE,GAAG;QAAEC,GAAG,EAAE;MAAI,CAAC;MACpCS,EAAE,EAAE;QAAEX,EAAE,EAAE,GAAG;QAAEC,GAAG,EAAE,GAAG;QAAEC,GAAG,EAAE;MAAI,CAAC;MACnCU,EAAE,EAAE;QAAEZ,EAAE,EAAE,GAAG;QAAEC,GAAG,EAAE,GAAG;QAAEC,GAAG,EAAE;MAAI,CAAC;MACnCW,EAAE,EAAE;QAAEb,EAAE,EAAE,GAAG;QAAEC,GAAG,EAAE,GAAG;QAAEC,GAAG,EAAE;MAAI;IACpC,CAAC;IAED,MAAMY,IAAI,GAAGhB,SAAS,CAACD,IAAI,CAACkB,KAAK,CAAC;IAClC,MAAMC,UAAU,GAAGR,cAAc,CAACX,IAAI,CAACoB,GAAG,CAAC;IAE3C,OAAO;MACLjB,EAAE,EAAEkB,IAAI,CAACC,KAAK,CAACL,IAAI,CAACd,EAAE,GAAGgB,UAAU,CAAChB,EAAE,CAAC;MACvCC,GAAG,EAAEiB,IAAI,CAACC,KAAK,CAACL,IAAI,CAACb,GAAG,GAAGe,UAAU,CAACf,GAAG,CAAC;MAC1CC,GAAG,EAAEgB,IAAI,CAACC,KAAK,CAACL,IAAI,CAACZ,GAAG,GAAGc,UAAU,CAACd,GAAG,CAAC;MAC1CkB,KAAK,EAAEF,IAAI,CAACC,KAAK,CAACL,IAAI,CAACd,EAAE,GAAGgB,UAAU,CAAChB,EAAE;IAC3C,CAAC;EACH,CAAC;;EAED;EACA,MAAMqB,eAAe,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAC9C;IACA,MAAMC,UAAU,GAAGN,IAAI,CAACO,MAAM,CAAC,CAAC,GAAG,IAAI;IACvC;IACA,MAAMC,QAAQ,GAAGR,IAAI,CAACO,MAAM,CAAC,CAAC,GAAG,IAAI;IAErC,IAAIC,QAAQ,EAAE;MACZ,OAAO;QAAEC,MAAM,EAAE,CAAC;QAAEH,UAAU,EAAE,KAAK;QAAEE,QAAQ,EAAE;MAAK,CAAC;IACzD;IAEA,IAAIC,MAAM,GAAGT,IAAI,CAACU,GAAG,CAAC,CAAC,EAAEN,QAAQ,CAACrB,GAAG,GAAGsB,QAAQ,CAACrB,GAAG,CAAC;IACrD,IAAIsB,UAAU,EAAE;MACdG,MAAM,GAAGT,IAAI,CAACC,KAAK,CAACQ,MAAM,GAAG,GAAG,CAAC;IACnC;IAEA,OAAO;MAAEA,MAAM;MAAEH,UAAU;MAAEE,QAAQ,EAAE;IAAM,CAAC;EAChD,CAAC;;EAED;EACA,MAAMG,gBAAgB,GAAGA,CAACP,QAAQ,EAAEQ,MAAM,EAAEC,UAAU,EAAEC,cAAc,KAAK;IACzE,IAAID,UAAU,CAACL,QAAQ,EAAE;MACvB,OAAO;QACLO,IAAI,EAAE,GAAGH,MAAM,CAACb,GAAG,IAAIa,MAAM,CAACf,KAAK,MAAMO,QAAQ,CAACL,GAAG,IAAIK,QAAQ,CAACP,KAAK,gBAAgB;QACvFmB,IAAI,EAAEF,cAAc,GAAG,iBAAiB,GAAG;MAC7C,CAAC;IACH;IAEA,IAAIG,OAAO,GAAG,GAAGb,QAAQ,CAACL,GAAG,IAAIK,QAAQ,CAACP,KAAK,MAAMe,MAAM,CAACb,GAAG,IAAIa,MAAM,CAACf,KAAK,OAAOgB,UAAU,CAACJ,MAAM,cAAc;IACrH,IAAII,UAAU,CAACP,UAAU,EAAE;MACzBW,OAAO,GAAG,SAASA,OAAO,EAAE;IAC9B;IACAA,OAAO,IAAI,KAAKL,MAAM,CAAC9B,EAAE,IAAI8B,MAAM,CAACV,KAAK,GAAG;IAE5C,OAAO;MACLa,IAAI,EAAEE,OAAO;MACbD,IAAI,EAAEF,cAAc,GACjBD,UAAU,CAACP,UAAU,GAAG,gBAAgB,GAAG,cAAc,GACzDO,UAAU,CAACP,UAAU,GAAG,gBAAgB,GAAG;IAChD,CAAC;EACH,CAAC;;EAED;EACA,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9BC,aAAa,CAAC,IAAI,CAAC;IACnBC,YAAY,CAAC,CAAC;MAAEL,IAAI,EAAE,QAAQ;MAAEC,IAAI,EAAE;IAAe,CAAC,CAAC,CAAC;IAExD,MAAMK,WAAW,GAAG7C,WAAW,CAAC8C,GAAG,CAAC3C,IAAI,KAAK;MAC3C,GAAGA,IAAI;MACP,GAAGD,YAAY,CAACC,IAAI,CAAC;MACrB4C,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IAEH,MAAMC,UAAU,GAAG/C,UAAU,CAAC6C,GAAG,CAAC3C,IAAI,KAAK;MACzC,GAAGA,IAAI;MACP,GAAGD,YAAY,CAACC,IAAI,CAAC;MACrB4C,QAAQ,EAAE;IACZ,CAAC,CAAC,CAAC;IAEH,IAAIE,IAAI,GAAG,CAAC;IACZ,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;;IAErB,OAAOL,WAAW,CAACM,IAAI,CAAChD,IAAI,IAAIA,IAAI,CAACG,EAAE,GAAG,CAAC,CAAC,IACrC0C,UAAU,CAACG,IAAI,CAAChD,IAAI,IAAIA,IAAI,CAACG,EAAE,GAAG,CAAC,CAAC,IACpC2C,IAAI,IAAIC,QAAQ,EAAE;MACvB,MAAM,IAAIE,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;MAEvD,MAAME,YAAY,GAAGN,IAAI,GAAG,CAAC,KAAK,CAAC;MACnC,MAAMrB,QAAQ,GAAG2B,YAAY,GAAGV,WAAW,GAAGG,UAAU;MACxD,MAAMnB,QAAQ,GAAG0B,YAAY,GAAGP,UAAU,GAAGH,WAAW;MAExDD,YAAY,CAACY,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAC7BjB,IAAI,EAAE,GAAGgB,YAAY,GAAG,MAAM,GAAG,GAAG,QAAQ;QAC5Cf,IAAI,EAAE;MACR,CAAC,CAAC,CAAC;MAEH,KAAK,IAAIrC,IAAI,IAAIyB,QAAQ,CAAC6B,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACpD,EAAE,GAAG,CAAC,CAAC,EAAE;QAC/C,MAAM8B,MAAM,GAAGP,QAAQ,CAAC8B,IAAI,CAACD,CAAC,IAAIA,CAAC,CAACpD,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI8B,MAAM,EAAE;UACV,MAAMC,UAAU,GAAGV,eAAe,CAACxB,IAAI,EAAEiC,MAAM,CAAC;UAChDA,MAAM,CAAC9B,EAAE,GAAGkB,IAAI,CAACU,GAAG,CAAC,CAAC,EAAEE,MAAM,CAAC9B,EAAE,GAAG+B,UAAU,CAACJ,MAAM,CAAC;UAEtDW,YAAY,CAACY,IAAI,IAAI,CAAC,GAAGA,IAAI,EAC3BrB,gBAAgB,CAAChC,IAAI,EAAEiC,MAAM,EAAEC,UAAU,EAAEkB,YAAY,CAAC,CACzD,CAAC;;UAEF;UACA,MAAM,IAAIH,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,GAAG,CAAC,CAAC;QACxD;MACF;MAEAO,cAAc,CAACX,IAAI,CAAC;MACpBA,IAAI,EAAE;IACR;;IAEA;IACA,MAAMY,SAAS,GAAGhB,WAAW,CAACM,IAAI,CAAChD,IAAI,IAAIA,IAAI,CAACG,EAAE,GAAG,CAAC,CAAC;IACvD,MAAMwD,MAAM,GAAGb,IAAI,GAAGC,QAAQ;IAE9BN,YAAY,CAACY,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;MAC7BjB,IAAI,EAAEuB,MAAM,GAAG,MAAM,GAAID,SAAS,GAAG,WAAW,GAAG,QAAS;MAC5DrB,IAAI,EAAEsB,MAAM,GAAG,MAAM,GAAID,SAAS,GAAG,SAAS,GAAG;IACnD,CAAC,CAAC,CAAC;IACHlB,aAAa,CAAC,KAAK,CAAC;EACtB,CAAC;;EAED;AACF;AAACoB,EAAA,GA5IQhE,MAAM;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}