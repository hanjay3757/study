{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\reacts\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport axios from 'axios'; // axios를 임포트하여 API 요청에 사용\nimport React, { useState, useRef, useEffect } from 'react'; // React hooks 사용\nimport './App.css'; // CSS 파일을 임포트하여 스타일 적용\n\n// =========================================\n// 상수 및 유틸리티 함수\n// =========================================\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\nfunction getLuck() {\n  var r = Math.floor(Math.random() * 100) + 1; // 1~100 사이의 랜덤 숫자 생성\n  var t = 5; // 기본값: N Normal\n\n  if (r <= 50) {\n    // 확률에 따라 등급을 결정\n    t = 4; // H High\n  }\n  if (r <= 20) {\n    // 확률에 따라 등급을 결정\n    t = 3; // R Rare\n  }\n  if (r <= 10) {\n    // 확률에 따라 등급을 결정\n    t = 2; // S Super\n  }\n  if (r <= 4) {\n    // 확률에 따라 등급을 결정\n    t = 1; // SR SuperRare\n  }\n  if (r === 1) {\n    // 1% 확률로 SSR\n    t = 0; // SSR SuperSuperRare\n  }\n  return t; // 등급 반환\n}\nfunction dice(s, e) {\n  return Math.floor(Math.random() * (e - s + 1)) + s;\n}\n\n// =========================================\n// 컴포넌트 정의\n// =========================================\n\n// Card 컴포넌트: 개별 카드의 표시와 상호작용을 담당\nfunction Card({\n  job,\n  grade,\n  isFlipped,\n  onFlip,\n  draggable,\n  onDragStart,\n  onDragOver,\n  onDrop,\n  index,\n  isActive,\n  isAttacker,\n  isTarget\n}) {\n  _s();\n  const [rotation, setRotation] = useState({\n    x: 0,\n    y: 0\n  });\n  const cardRef = useRef(null);\n  const handleMouseMove = e => {\n    if (!cardRef.current) return;\n    const card = cardRef.current;\n    const rect = card.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    const centerX = rect.width / 2;\n    const centerY = rect.height / 2;\n    const rotateX = -(y - centerY) / 10;\n    const rotateY = (x - centerX) / 10;\n    setRotation({\n      x: rotateX,\n      y: rotateY\n    });\n  };\n  const handleMouseLeave = () => {\n    setRotation({\n      x: 0,\n      y: 0\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: cardRef,\n    className: `card ${job} ${grade} ${isFlipped ? 'flipped' : ''} ${isActive ? 'active' : ''} ${isAttacker ? 'attacker' : ''} ${isTarget ? 'target' : ''}`,\n    style: {\n      transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\n      transition: 'transform 0.6s'\n    },\n    onClick: onFlip,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    draggable: draggable,\n    onDragStart: e => onDragStart && onDragStart(e, index),\n    onDragOver: e => onDragOver && onDragOver(e),\n    onDrop: e => onDrop && onDrop(e, index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-front\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-title\",\n          children: job\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-grade\",\n          children: grade\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-back\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-back-design\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n// CardArea 컴포넌트: 카드들의 컨테이너\n_s(Card, \"Jk/miFWS+1D3kwUUMKYyXE8qlJk=\");\n_c = Card;\nfunction CardArea({\n  children,\n  type,\n  handleDrop\n}) {\n  _s2();\n  const [isDragOver, setIsDragOver] = useState(false);\n  const handleDragOver = e => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n  const handleDragLeave = () => {\n    setIsDragOver(false);\n  };\n  const onAreaDrop = e => {\n    e.preventDefault();\n    setIsDragOver(false);\n    handleDrop(e, type);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `card-area ${type} ${isDragOver ? 'drag-over' : ''}`,\n    onDragOver: handleDragOver,\n    onDragLeave: handleDragLeave,\n    onDrop: onAreaDrop,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n\n// Battle 컴포넌트: 전�� 시스템 구현\n_s2(CardArea, \"KSgef2EmlxQM8My/urt8J+b7ImM=\");\n_c2 = CardArea;\nfunction Battle({\n  playerParty,\n  enemyParty,\n  onBattleEnd\n}) {\n  _s3();\n  const [battleLog, setBattleLog] = useState([]); // 전투 로그\n  const [currentTurn, setCurrentTurn] = useState(1); // 현재 턴\n  const [isBattling, setIsBattling] = useState(false); // 전투 진행 여부\n  const logRef = useRef(null);\n  const [activeAttacker, setActiveAttacker] = useState(null);\n  const [activeTarget, setActiveTarget] = useState(null);\n\n  // 로그가 업데이트될 때마다 스크롤을 맨 아래로 이동시키는 함수\n  const scrollToBottom = () => {\n    if (logRef.current) {\n      logRef.current.scrollTop = logRef.current.scrollHeight;\n    }\n  };\n\n  // battleLog가 변경될 때마다 스크롤 실행\n  useEffect(() => {\n    scrollToBottom();\n  }, [battleLog]);\n\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\n  const getCardStats = card => {\n    const baseStats = {\n      SSR: {\n        hp: 100,\n        atk: 20,\n        def: 15\n      },\n      SR: {\n        hp: 85,\n        atk: 17,\n        def: 13\n      },\n      S: {\n        hp: 70,\n        atk: 15,\n        def: 11\n      },\n      R: {\n        hp: 60,\n        atk: 13,\n        def: 9\n      },\n      H: {\n        hp: 50,\n        atk: 11,\n        def: 7\n      },\n      N: {\n        hp: 40,\n        atk: 9,\n        def: 5\n      }\n    };\n    const jobMultipliers = {\n      전사: {\n        hp: 1.2,\n        atk: 0.9,\n        def: 1.3\n      },\n      마법사: {\n        hp: 0.8,\n        atk: 1.4,\n        def: 0.7\n      },\n      궁수: {\n        hp: 0.9,\n        atk: 1.2,\n        def: 0.8\n      },\n      도적: {\n        hp: 0.7,\n        atk: 1.3,\n        def: 0.6\n      },\n      사제: {\n        hp: 1.1,\n        atk: 0.7,\n        def: 1.0\n      }\n    };\n    const base = baseStats[card.grade];\n    const multiplier = jobMultipliers[card.job];\n    return {\n      hp: Math.floor(base.hp * multiplier.hp),\n      atk: Math.floor(base.atk * multiplier.atk),\n      def: Math.floor(base.def * multiplier.def),\n      maxHp: Math.floor(base.hp * multiplier.hp)\n    };\n  };\n\n  // 데미지 계산 함수 수정 - 더 많은 랜덤성 추가\n  const calculateDamage = (attacker, defender) => {\n    // 명중률 (85%)\n    const hitChance = Math.random() < 0.85;\n    if (!hitChance) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: false,\n        isMissed: true\n      };\n    }\n\n    // 회피율 (10% + 직업 보정)\n    const jobEvadeBonus = {\n      도적: 0.05,\n      // 도적은 회피율 +5%\n      궁수: 0.03 // 궁수는 회피율 +3%\n    };\n    const evadeBonus = jobEvadeBonus[defender.job] || 0;\n    const isEvaded = Math.random() < 0.10 + evadeBonus;\n    if (isEvaded) {\n      return {\n        damage: 0,\n        isCritical: false,\n        isEvaded: true,\n        isMissed: false\n      };\n    }\n\n    // 크리티컬 확률 (15% + 직업 보정)\n    const jobCritBonus = {\n      궁수: 0.05,\n      // 궁수는 크리티컬 확률 +5%\n      도적: 0.03 // 도적은 크리티컬 확률 +3%\n    };\n    const critBonus = jobCritBonus[attacker.job] || 0;\n    const isCritical = Math.random() < 0.15 + critBonus;\n\n    // 기본 데미지 계산에 변동폭 추가 (±20%)\n    let damage = Math.max(1, attacker.atk - defender.def);\n    const variation = 0.2;\n    const randomFactor = 1 + (Math.random() * variation * 2 - variation);\n    damage = Math.floor(damage * randomFactor);\n\n    // 크리티컬 데미지는 1.5~2.0배\n    if (isCritical) {\n      const critMultiplier = 1.5 + Math.random() * 0.5;\n      damage = Math.floor(damage * critMultiplier);\n    }\n\n    // 직업별 특수 효과\n    if (attacker.job === '전사') {\n      // 전사는 10% 확률로 추가 데미지\n      if (Math.random() < 0.1) {\n        damage = Math.floor(damage * 1.3);\n      }\n    } else if (attacker.job === '마법사') {\n      // 마법사는 방어력 무시 효과 (20~50%)\n      const defIgnore = 0.2 + Math.random() * 0.3;\n      damage += Math.floor(defender.def * defIgnore);\n    }\n    return {\n      damage,\n      isCritical,\n      isEvaded: false,\n      isMissed: false\n    };\n  };\n\n  // createLogMessage 함수 수정\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\n    const attackerTeam = isPlayerAttack ? '아군' : '적군';\n    const baseMessage = `[${attackerTeam}] ${attacker.job}(${attacker.grade}) ➔ ${target.job}(${target.grade}): `;\n    if (damageInfo.isMissed) {\n      return {\n        text: baseMessage + \"빗나감!\",\n        type: 'missed'\n      };\n    }\n    if (damageInfo.isEvaded) {\n      return {\n        text: baseMessage + \"회피!\",\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\n      };\n    }\n    let message = baseMessage;\n    if (damageInfo.isCritical) {\n      message += '치명타! ';\n    }\n    message += `${damageInfo.damage}데미지`;\n    message += ` (HP: ${target.hp}/${target.maxHp})`;\n    return {\n      text: message,\n      type: isPlayerAttack ? damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt' : damageInfo.isCritical ? 'critical-taken' : 'damage-taken'\n    };\n  };\n\n  // startBattle 함수 수정 - 최대 턴 수 관련 부분\n  const startBattle = async () => {\n    setIsBattling(true);\n\n    // 초기 로그 설정을 루프 밖으로 이동\n    setBattleLog([{\n      text: '전투 시작!',\n      type: 'battle-start'\n    }]);\n    const playerCards = playerParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: true\n    }));\n    const enemyCards = enemyParty.map(card => ({\n      ...card,\n      ...getCardStats(card),\n      isPlayer: false\n    }));\n    const MAX_TURNS = 20; // 최대 턴 수를 20턴으로 설정\n    let turn = 1;\n\n    // 로그 업데이트 함수를 별도로 정의\n    const updateBattleLog = newEntry => {\n      setBattleLog(prev => [...prev, newEntry]);\n    };\n    while (playerCards.some(card => card.hp > 0) && enemyCards.some(card => card.hp > 0) && turn <= MAX_TURNS) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // 턴 시작 로그\n      updateBattleLog({\n        text: `${turn}턴 시작!`,\n        type: 'turn-start'\n      });\n\n      // 플레이어 파티의 공격\n      for (let i = 0; i < playerCards.length; i++) {\n        const attacker = playerCards[i];\n        if (attacker.hp > 0) {\n          const target = enemyCards.find(c => c.hp > 0);\n          if (target) {\n            setActiveAttacker({\n              card: attacker,\n              isPlayer: true\n            });\n            setActiveTarget({\n              card: target,\n              isPlayer: false\n            });\n            const damageInfo = calculateDamage(attacker, target);\n            target.hp = Math.max(0, target.hp - damageInfo.damage);\n            updateBattleLog(createLogMessage(attacker, target, damageInfo, true));\n            if (target.hp <= 0) {\n              updateBattleLog({\n                text: `[적군] ${target.job}(${target.grade})가 쓰러졌습니다!`,\n                type: 'card-death'\n              });\n            }\n            await new Promise(resolve => setTimeout(resolve, 800));\n            setActiveAttacker(null);\n            setActiveTarget(null);\n            await new Promise(resolve => setTimeout(resolve, 200));\n          }\n        }\n      }\n\n      // 적 파티의 공격\n      for (let i = 0; i < enemyCards.length; i++) {\n        const attacker = enemyCards[i];\n        if (attacker.hp > 0) {\n          const target = playerCards.find(c => c.hp > 0);\n          if (target) {\n            setActiveAttacker({\n              card: attacker,\n              isPlayer: false\n            });\n            setActiveTarget({\n              card: target,\n              isPlayer: true\n            });\n            const damageInfo = calculateDamage(attacker, target);\n            target.hp = Math.max(0, target.hp - damageInfo.damage);\n            updateBattleLog(createLogMessage(attacker, target, damageInfo, false));\n            if (target.hp <= 0) {\n              updateBattleLog({\n                text: `[아군] ${target.job}(${target.grade})가 쓰러졌습니다!`,\n                type: 'card-death'\n              });\n            }\n            await new Promise(resolve => setTimeout(resolve, 800));\n            setActiveAttacker(null);\n            setActiveTarget(null);\n            await new Promise(resolve => setTimeout(resolve, 200));\n          }\n        }\n      }\n      if (turn === MAX_TURNS) {\n        updateBattleLog({\n          text: `${MAX_TURNS}턴이 경과했습니다. 시간 초과로 패배!`,\n          type: 'time-over'\n        });\n        break;\n      }\n      setCurrentTurn(turn);\n      turn++;\n    }\n\n    // 전투 결과 처리 수정\n    const battleResult = {\n      playerWon: turn <= MAX_TURNS && playerCards.some(card => card.hp > 0),\n      deadCards: playerCards.map((card, index) => ({\n        ...card,\n        originalIndex: index\n      })).filter(card => card.hp <= 0),\n      timeOver: turn > MAX_TURNS\n    };\n    updateBattleLog({\n      text: battleResult.timeOver ? '시간 초과로 패배!' : battleResult.playerWon ? '플레이어의 승리!' : '적의 패배!',\n      type: battleResult.timeOver ? 'time-over' : battleResult.playerWon ? 'victory' : 'defeat'\n    });\n    setIsBattling(false);\n    onBattleEnd && onBattleEnd(battleResult);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"battle-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"enemy-area\",\n        children: enemyParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card,\n          isActive: (activeAttacker === null || activeAttacker === void 0 ? void 0 : activeAttacker.card) === card || (activeTarget === null || activeTarget === void 0 ? void 0 : activeTarget.card) === card,\n          isAttacker: (activeAttacker === null || activeAttacker === void 0 ? void 0 : activeAttacker.card) === card,\n          isTarget: (activeTarget === null || activeTarget === void 0 ? void 0 : activeTarget.card) === card\n        }, `enemy-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"player-area\",\n        children: playerParty.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n          ...card,\n          isActive: (activeAttacker === null || activeAttacker === void 0 ? void 0 : activeAttacker.card) === card || (activeTarget === null || activeTarget === void 0 ? void 0 : activeTarget.card) === card,\n          isAttacker: (activeAttacker === null || activeAttacker === void 0 ? void 0 : activeAttacker.card) === card,\n          isTarget: (activeTarget === null || activeTarget === void 0 ? void 0 : activeTarget.card) === card\n        }, `player-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startBattle,\n        disabled: isBattling,\n        className: \"battle-button\",\n        children: \"\\uC804\\uD22C \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"turn-counter\",\n        children: [\"\\uD134: \", currentTurn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-log\",\n      ref: logRef,\n      children: battleLog.map((log, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `log-entry ${log.type}`,\n        children: log.text\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 5\n  }, this);\n}\n\n// =========================================\n// 메인 App 컴포넌트\n// =========================================\n_s3(Battle, \"8OkfLBowhuV1jFsCvKXBQ+Lm+0o=\");\n_c3 = Battle;\nfunction App() {\n  _s4();\n  // =========================================\n  // 상태 관리\n  // =========================================\n  const [my, setMy] = useState([]);\n  const [party, setParty] = useState([{\n    job: '전사',\n    grade: 'SSR',\n    isFlipped: false\n  }, {\n    job: '마법사',\n    grade: 'SR',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'S',\n    isFlipped: false\n  }, {\n    job: '전사',\n    grade: 'R',\n    isFlipped: false\n  }, {\n    job: '궁수',\n    grade: 'H',\n    isFlipped: false\n  }]);\n\n  // 적 파티 상태 추가 - 랜덤하게 생성\n  const [enemyParty] = useState(() => {\n    return Array(5).fill(null).map(() => ({\n      job: jobs[dice(0, 4)],\n      grade: grade[getLuck()],\n      isFlipped: false\n    }));\n  });\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\n\n  // =========================================\n  // 드래그 앤 드롭 핸들러\n  // =========================================\n  const handleDragStart = (e, sourceType, index) => {\n    e.dataTransfer.setData('text/plain', JSON.stringify({\n      type: sourceType,\n      index\n    }));\n  };\n  const handleDrop = (e, targetType, targetIndex = null) => {\n    e.preventDefault();\n    e.stopPropagation();\n    try {\n      const {\n        type: sourceType,\n        index: sourceIndex\n      } = JSON.parse(e.dataTransfer.getData('text/plain'));\n\n      // 파티에서 보유 카드함으로 드래그할 때\n      if (sourceType === 'party' && targetType === 'my') {\n        const movedCard = party[sourceIndex];\n        // 파티에서 제거\n        setParty(prev => prev.filter((_, idx) => idx !== sourceIndex));\n        // 보유 카드함에 추가\n        setMy(prev => [...prev, movedCard]);\n        return;\n      }\n      const sourceArray = sourceType === 'party' ? party : my;\n      const targetArray = targetType === 'party' ? party : my;\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\n\n      // 파티 최대 인원 체크\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\n        alert('파티 인원이 최대입니다.');\n        return;\n      }\n\n      // 드래그한 카드\n      const draggedCard = {\n        ...sourceArray[sourceIndex]\n      };\n      if (targetIndex !== null) {\n        // 카드 간 교체\n        if (sourceType === targetType) {\n          // 같은 영역 내 이동\n          const newArray = [...sourceArray];\n          [newArray[sourceIndex], newArray[targetIndex]] = [newArray[targetIndex], newArray[sourceIndex]];\n          setSourceArray(newArray);\n        } else {\n          // 다른 영역 간 이동\n          const newSourceArray = [...sourceArray];\n          const newTargetArray = [...targetArray];\n          if (targetType === 'party') {\n            // 보유 카드에 파티로 이동\n            if (newTargetArray[targetIndex]) {\n              // 기존 파티 카드를 보유 카드로 이동\n              newSourceArray.push(newTargetArray[targetIndex]);\n            }\n            newTargetArray[targetIndex] = draggedCard;\n            newSourceArray.splice(sourceIndex, 1);\n          } else {\n            // 파티에서 보유 카드로 이동\n            newSourceArray[sourceIndex] = newTargetArray[targetIndex];\n            newTargetArray[targetIndex] = draggedCard;\n          }\n          setSourceArray(newSourceArray);\n          setTargetArray(newTargetArray);\n        }\n      } else {\n        // 영역에 드롭\n        if (targetType === 'party' && targetArray.length < 5) {\n          const newSourceArray = [...sourceArray];\n          newSourceArray.splice(sourceIndex, 1);\n          setSourceArray(newSourceArray);\n          setTargetArray(prev => [...prev, draggedCard]);\n        } else if (targetType === 'my') {\n          const newSourceArray = [...sourceArray];\n          newSourceArray.splice(sourceIndex, 1);\n          setSourceArray(newSourceArray);\n          setTargetArray(prev => [...prev, draggedCard]);\n        }\n      }\n    } catch (error) {\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\n    }\n  };\n\n  // =========================================\n  // 가챠 시스템\n  // =========================================\n  const handleGacha = async (useApi = false) => {\n    setIsGachaAnimating(true);\n    try {\n      let newCard;\n      if (useApi) {\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\n        newCard = response.data;\n      } else {\n        newCard = {\n          job: jobs[dice(0, 4)],\n          grade: grade[getLuck()]\n        };\n      }\n      newCard.isFlipped = true;\n      setMy(prev => [...prev, newCard]);\n      setTimeout(() => {\n        setMy(prev => prev.map((card, idx) => idx === prev.length - 1 ? {\n          ...card,\n          isFlipped: false\n        } : card));\n      }, 500);\n    } catch (error) {\n      console.error('가챠 실패:', error);\n      alert('카드 기에 실패했습니. 다시 시도해주세요.');\n    } finally {\n      setIsGachaAnimating(false);\n    }\n  };\n\n  // =========================================\n  // 카드 렌더링 헬퍼 함수\n  // =========================================\n\n  // 카드 렌더링 함수\n  const renderCards = (cards, type) => {\n    return cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      ...card,\n      onFlip: () => {\n        const setFunction = type === 'party' ? setParty : setMy;\n        setFunction(prev => prev.map((c, idx) => idx === index ? {\n          ...c,\n          isFlipped: !c.isFlipped\n        } : c));\n      },\n      draggable: true,\n      onDragStart: e => handleDragStart(e, type, index),\n      onDragOver: e => e.preventDefault(),\n      onDrop: e => handleDrop(e, type, index),\n      index: index\n    }, `${type}-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 7\n    }, this));\n  };\n\n  // 등급별 정렬 순서 정의\n  const gradeOrder = {\n    'SSR': 0,\n    'SR': 1,\n    'S': 2,\n    'R': 3,\n    'H': 4,\n    'N': 5\n  };\n\n  // 카드 그룹화 및 정렬 함수\n  const groupCards = cards => {\n    // 1. 카드 그룹화\n    const grouped = cards.reduce((acc, card) => {\n      const key = `${card.job}-${card.grade}`;\n      if (!acc[key]) {\n        acc[key] = {\n          ...card,\n          count: 1\n        };\n      } else {\n        acc[key].count++;\n      }\n      return acc;\n    }, {});\n\n    // 2. 그룹화된 카드를 배열로 변환하고 정렬\n    return Object.entries(grouped).map(([key, card]) => card).sort((a, b) => {\n      // 먼저 등급으로 정렬\n      const gradeCompare = gradeOrder[a.grade] - gradeOrder[b.grade];\n\n      // 등급이 같으면 직업명으로 정렬\n      if (gradeCompare === 0) {\n        return a.job.localeCompare(b.job);\n      }\n      return gradeCompare;\n    });\n  };\n\n  // 그룹화된 카드 렌더링 함수\n  const renderGroupedCards = () => {\n    const sortedGroupedCards = groupCards(my);\n    return sortedGroupedCards.map((card, index) => {\n      const originalIndex = my.findIndex(c => c.job === card.job && c.grade === card.grade);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grouped-card\",\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          job: card.job,\n          grade: card.grade,\n          isFlipped: card.isFlipped,\n          onFlip: () => {\n            setMy(prev => prev.map((c, idx) => idx === originalIndex ? {\n              ...c,\n              isFlipped: !c.isFlipped\n            } : c));\n          },\n          draggable: true,\n          onDragStart: e => handleDragStart(e, 'my', originalIndex),\n          onDragOver: e => e.preventDefault(),\n          onDrop: e => handleDrop(e, 'my', originalIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this), card.count > 1 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"card-count\",\n          children: [\"x\", card.count]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 13\n        }, this)]\n      }, `grouped-${card.job}-${card.grade}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  // 전투 결과 처리 함수 수정\n  const handleBattleEnd = battleResult => {\n    if (battleResult.deadCards.length > 0) {\n      // 파티의 원래 상태를 유지하면서 죽은 카드들의 HP만 리셋\n      setParty(prev => prev.map(card => {\n        const deadCard = battleResult.deadCards.find((dead, index) => dead.job === card.job && dead.grade === card.grade);\n        if (deadCard) {\n          // 죽은 카드를 리셋하여 파티에 유지\n          return {\n            ...card,\n            isFlipped: false\n          };\n        }\n        return card;\n      }));\n    }\n  };\n\n  // =========================================\n  // 렌더링\n  // =========================================\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gacha-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 715,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(false),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"\\uB85C\\uCEEC \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleGacha(true),\n        disabled: isGachaAnimating,\n        className: `gacha-button ${isGachaAnimating ? 'animating' : ''}`,\n        children: \"API \\uAC00\\uCC60\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 723,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uD30C\\uD2F0 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 733,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        type: \"party\",\n        handleDrop: handleDrop,\n        children: renderCards(party, 'party')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 732,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inventory\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uBCF4\\uC720 \\uCE74\\uB4DC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardArea, {\n        type: \"my\",\n        handleDrop: handleDrop // handleDrop 함수 전달\n        ,\n        children: renderGroupedCards()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 742,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"battle-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC804\\uD22C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Battle, {\n        playerParty: party,\n        enemyParty: enemyParty,\n        onBattleEnd: handleBattleEnd // 전투 결과 처리 함수 전달\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 752,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 713,\n    columnNumber: 5\n  }, this);\n}\n_s4(App, \"sdIo0WmARNfeRS/safdRLq3tf5Y=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"CardArea\");\n$RefreshReg$(_c3, \"Battle\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["axios","React","useState","useRef","useEffect","jsxDEV","_jsxDEV","jobs","grade","getLuck","r","Math","floor","random","t","dice","s","e","Card","job","isFlipped","onFlip","draggable","onDragStart","onDragOver","onDrop","index","isActive","isAttacker","isTarget","_s","rotation","setRotation","x","y","cardRef","handleMouseMove","current","card","rect","getBoundingClientRect","clientX","left","clientY","top","centerX","width","centerY","height","rotateX","rotateY","handleMouseLeave","ref","className","style","transform","transition","onClick","onMouseMove","onMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","CardArea","type","handleDrop","_s2","isDragOver","setIsDragOver","handleDragOver","preventDefault","handleDragLeave","onAreaDrop","onDragLeave","_c2","Battle","playerParty","enemyParty","onBattleEnd","_s3","battleLog","setBattleLog","currentTurn","setCurrentTurn","isBattling","setIsBattling","logRef","activeAttacker","setActiveAttacker","activeTarget","setActiveTarget","scrollToBottom","scrollTop","scrollHeight","getCardStats","baseStats","SSR","hp","atk","def","SR","S","R","H","N","jobMultipliers","전사","마법사","궁수","도적","사제","base","multiplier","maxHp","calculateDamage","attacker","defender","hitChance","damage","isCritical","isEvaded","isMissed","jobEvadeBonus","evadeBonus","jobCritBonus","critBonus","max","variation","randomFactor","critMultiplier","defIgnore","createLogMessage","target","damageInfo","isPlayerAttack","attackerTeam","baseMessage","text","message","startBattle","playerCards","map","isPlayer","enemyCards","MAX_TURNS","turn","updateBattleLog","newEntry","prev","some","Promise","resolve","setTimeout","i","length","find","c","battleResult","playerWon","deadCards","originalIndex","filter","timeOver","disabled","log","_c3","App","_s4","my","setMy","party","setParty","Array","fill","isGachaAnimating","setIsGachaAnimating","handleDragStart","sourceType","dataTransfer","setData","JSON","stringify","targetType","targetIndex","stopPropagation","sourceIndex","parse","getData","movedCard","_","idx","sourceArray","targetArray","setSourceArray","setTargetArray","alert","draggedCard","newArray","newSourceArray","newTargetArray","push","splice","error","console","handleGacha","useApi","newCard","response","get","data","renderCards","cards","setFunction","gradeOrder","groupCards","grouped","reduce","acc","key","count","Object","entries","sort","a","b","gradeCompare","localeCompare","renderGroupedCards","sortedGroupedCards","findIndex","handleBattleEnd","deadCard","dead","_c4","$RefreshReg$"],"sources":["C:/JWH/vsc/study/reacts/src/App.js"],"sourcesContent":["import axios from 'axios';\t\t\t// axios를 임포트하여 API 요청에 사용\r\nimport React, { useState, useRef, useEffect } from 'react';  // React hooks 사용\r\nimport './App.css';  // CSS 파일을 임포트하여 스타일 적용\r\n\r\n// =========================================\r\n// 상수 및 유틸리티 함수\r\n// =========================================\r\nvar jobs = [\"전사\", \"마법사\", \"궁수\", \"도적\", \"사제\"];\r\nvar grade = [\"SSR\", \"SR\", \"S\", \"R\", \"H\", \"N\"];\r\n\r\nfunction getLuck() {\r\n  var r = Math.floor(Math.random() * 100) + 1;  // 1~100 사이의 랜덤 숫자 생성\r\n  var t = 5;\t// 기본값: N Normal\r\n\r\n  if (r <= 50) {\t// 확률에 따라 등급을 결정\r\n    t = 4; // H High\r\n  }\r\n  if (r <= 20) {\t// 확률에 따라 등급을 결정\r\n    t = 3; // R Rare\r\n  }\r\n  if (r <= 10) {\t// 확률에 따라 등급을 결정\r\n    t = 2; // S Super\r\n  }\r\n  if (r <= 4) {\t// 확률에 따라 등급을 결정\r\n    t = 1; // SR SuperRare\r\n  }\r\n  if (r === 1) {\t// 1% 확률로 SSR\r\n    t = 0; // SSR SuperSuperRare\r\n  }\r\n\r\n  return t;  // 등급 반환\r\n}\r\n\r\nfunction dice(s, e) {\r\n  return Math.floor(Math.random() * (e - s + 1)) + s;\r\n}\r\n\r\n// =========================================\r\n// 컴포넌트 정의\r\n// =========================================\r\n\r\n// Card 컴포넌트: 개별 카드의 표시와 상호작용을 담당\r\nfunction Card({ job, grade, isFlipped, onFlip, draggable, onDragStart, onDragOver, onDrop, index, isActive, isAttacker, isTarget }) {\r\n  const [rotation, setRotation] = useState({ x: 0, y: 0 });\r\n  const cardRef = useRef(null);\r\n\r\n  const handleMouseMove = (e) => {\r\n    if (!cardRef.current) return;\r\n\r\n    const card = cardRef.current;\r\n    const rect = card.getBoundingClientRect();\r\n    const x = e.clientX - rect.left;\r\n    const y = e.clientY - rect.top;\r\n\r\n    const centerX = rect.width / 2;\r\n    const centerY = rect.height / 2;\r\n\r\n    const rotateX = -(y - centerY) / 10;\r\n    const rotateY = (x - centerX) / 10;\r\n\r\n    setRotation({ x: rotateX, y: rotateY });\r\n  };\r\n\r\n  const handleMouseLeave = () => {\r\n    setRotation({ x: 0, y: 0 });\r\n  };\r\n\r\n  return (\r\n    <div \r\n      ref={cardRef}\r\n      className={`card ${job} ${grade} ${isFlipped ? 'flipped' : ''} ${isActive ? 'active' : ''} ${isAttacker ? 'attacker' : ''} ${isTarget ? 'target' : ''}`}\r\n      style={{\r\n        transform: `perspective(1000px) rotateX(${rotation.x}deg) rotateY(${rotation.y}deg) ${isFlipped ? 'rotateY(180deg)' : ''}`,\r\n        transition: 'transform 0.6s'\r\n      }}\r\n      onClick={onFlip}\r\n      onMouseMove={handleMouseMove}\r\n      onMouseLeave={handleMouseLeave}\r\n      draggable={draggable}\r\n      onDragStart={(e) => onDragStart && onDragStart(e, index)}\r\n      onDragOver={(e) => onDragOver && onDragOver(e)}\r\n      onDrop={(e) => onDrop && onDrop(e, index)}\r\n    >\r\n      <div className=\"card-front\">\r\n        <div className=\"card-content\">\r\n          <div className=\"card-title\">{job}</div>\r\n          <div className=\"card-grade\">{grade}</div>\r\n        </div>\r\n      </div>\r\n      <div className=\"card-back\">\r\n        <div className=\"card-back-design\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// CardArea 컴포넌트: 카드들의 컨테이너\r\nfunction CardArea({ children, type, handleDrop }) {\r\n  const [isDragOver, setIsDragOver] = useState(false);\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    setIsDragOver(true);\r\n  };\r\n\r\n  const handleDragLeave = () => {\r\n    setIsDragOver(false);\r\n  };\r\n\r\n  const onAreaDrop = (e) => {\r\n    e.preventDefault();\r\n    setIsDragOver(false);\r\n    handleDrop(e, type);\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={`card-area ${type} ${isDragOver ? 'drag-over' : ''}`}\r\n      onDragOver={handleDragOver}\r\n      onDragLeave={handleDragLeave}\r\n      onDrop={onAreaDrop}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Battle 컴포넌트: 전�� 시스템 구현\r\nfunction Battle({ playerParty, enemyParty, onBattleEnd }) {\r\n  const [battleLog, setBattleLog] = useState([]);  // 전투 로그\r\n  const [currentTurn, setCurrentTurn] = useState(1);  // 현재 턴\r\n  const [isBattling, setIsBattling] = useState(false);  // 전투 진행 여부\r\n  const logRef = useRef(null);\r\n  const [activeAttacker, setActiveAttacker] = useState(null);\r\n  const [activeTarget, setActiveTarget] = useState(null);\r\n\r\n  // 로그가 업데이트될 때마다 스크롤을 맨 아래로 이동시키는 함수\r\n  const scrollToBottom = () => {\r\n    if (logRef.current) {\r\n      logRef.current.scrollTop = logRef.current.scrollHeight;\r\n    }\r\n  };\r\n\r\n  // battleLog가 변경될 때마다 스크롤 실행\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [battleLog]);\r\n\r\n  // 카드의 스탯 계산 함수 수정 - 더 균형잡힌 스탯\r\n  const getCardStats = (card) => {\r\n    const baseStats = {\r\n      SSR: { hp: 100, atk: 20, def: 15 },\r\n      SR: { hp: 85, atk: 17, def: 13 },\r\n      S: { hp: 70, atk: 15, def: 11 },\r\n      R: { hp: 60, atk: 13, def: 9 },\r\n      H: { hp: 50, atk: 11, def: 7 },\r\n      N: { hp: 40, atk: 9, def: 5 }\r\n    };\r\n\r\n    const jobMultipliers = {\r\n      전사: { hp: 1.2, atk: 0.9, def: 1.3 },\r\n      마법사: { hp: 0.8, atk: 1.4, def: 0.7 },\r\n      궁수: { hp: 0.9, atk: 1.2, def: 0.8 },\r\n      도적: { hp: 0.7, atk: 1.3, def: 0.6 },\r\n      사제: { hp: 1.1, atk: 0.7, def: 1.0 }\r\n    };\r\n\r\n    const base = baseStats[card.grade];\r\n    const multiplier = jobMultipliers[card.job];\r\n\r\n    return {\r\n      hp: Math.floor(base.hp * multiplier.hp),\r\n      atk: Math.floor(base.atk * multiplier.atk),\r\n      def: Math.floor(base.def * multiplier.def),\r\n      maxHp: Math.floor(base.hp * multiplier.hp)\r\n    };\r\n  };\r\n\r\n  // 데미지 계산 함수 수정 - 더 많은 랜덤성 추가\r\n  const calculateDamage = (attacker, defender) => {\r\n    // 명중률 (85%)\r\n    const hitChance = Math.random() < 0.85;\r\n    if (!hitChance) {\r\n      return { damage: 0, isCritical: false, isEvaded: false, isMissed: true };\r\n    }\r\n\r\n    // 회피율 (10% + 직업 보정)\r\n    const jobEvadeBonus = {\r\n      도적: 0.05,  // 도적은 회피율 +5%\r\n      궁수: 0.03   // 궁수는 회피율 +3%\r\n    };\r\n    const evadeBonus = jobEvadeBonus[defender.job] || 0;\r\n    const isEvaded = Math.random() < (0.10 + evadeBonus);\r\n    if (isEvaded) {\r\n      return { damage: 0, isCritical: false, isEvaded: true, isMissed: false };\r\n    }\r\n\r\n    // 크리티컬 확률 (15% + 직업 보정)\r\n    const jobCritBonus = {\r\n      궁수: 0.05,  // 궁수는 크리티컬 확률 +5%\r\n      도적: 0.03   // 도적은 크리티컬 확률 +3%\r\n    };\r\n    const critBonus = jobCritBonus[attacker.job] || 0;\r\n    const isCritical = Math.random() < (0.15 + critBonus);\r\n\r\n    // 기본 데미지 계산에 변동폭 추가 (±20%)\r\n    let damage = Math.max(1, attacker.atk - defender.def);\r\n    const variation = 0.2;\r\n    const randomFactor = 1 + (Math.random() * variation * 2 - variation);\r\n    damage = Math.floor(damage * randomFactor);\r\n\r\n    // 크리티컬 데미지는 1.5~2.0배\r\n    if (isCritical) {\r\n      const critMultiplier = 1.5 + (Math.random() * 0.5);\r\n      damage = Math.floor(damage * critMultiplier);\r\n    }\r\n\r\n    // 직업별 특수 효과\r\n    if (attacker.job === '전사') {\r\n      // 전사는 10% 확률로 추가 데미지\r\n      if (Math.random() < 0.1) {\r\n        damage = Math.floor(damage * 1.3);\r\n      }\r\n    } else if (attacker.job === '마법사') {\r\n      // 마법사는 방어력 무시 효과 (20~50%)\r\n      const defIgnore = 0.2 + (Math.random() * 0.3);\r\n      damage += Math.floor(defender.def * defIgnore);\r\n    }\r\n\r\n    return { damage, isCritical, isEvaded: false, isMissed: false };\r\n  };\r\n\r\n  // createLogMessage 함수 수정\r\n  const createLogMessage = (attacker, target, damageInfo, isPlayerAttack) => {\r\n    const attackerTeam = isPlayerAttack ? '아군' : '적군';\r\n    const baseMessage = `[${attackerTeam}] ${attacker.job}(${attacker.grade}) ➔ ${target.job}(${target.grade}): `;\r\n\r\n    if (damageInfo.isMissed) {\r\n      return {\r\n        text: baseMessage + \"빗나감!\",\r\n        type: 'missed'\r\n      };\r\n    }\r\n\r\n    if (damageInfo.isEvaded) {\r\n      return {\r\n        text: baseMessage + \"회피!\",\r\n        type: isPlayerAttack ? 'evaded-by-enemy' : 'evaded-by-player'\r\n      };\r\n    }\r\n\r\n    let message = baseMessage;\r\n    if (damageInfo.isCritical) {\r\n      message += '치명타! ';\r\n    }\r\n    message += `${damageInfo.damage}데미지`;\r\n    message += ` (HP: ${target.hp}/${target.maxHp})`;\r\n\r\n    return {\r\n      text: message,\r\n      type: isPlayerAttack ? \r\n        (damageInfo.isCritical ? 'critical-dealt' : 'damage-dealt') : \r\n        (damageInfo.isCritical ? 'critical-taken' : 'damage-taken')\r\n    };\r\n  };\r\n\r\n  // startBattle 함수 수정 - 최대 턴 수 관련 부분\r\n  const startBattle = async () => {\r\n    setIsBattling(true);\r\n    \r\n    // 초기 로그 설정을 루프 밖으로 이동\r\n    setBattleLog([{ text: '전투 시작!', type: 'battle-start' }]);\r\n\r\n    const playerCards = playerParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: true\r\n    }));\r\n\r\n    const enemyCards = enemyParty.map(card => ({\r\n      ...card,\r\n      ...getCardStats(card),\r\n      isPlayer: false\r\n    }));\r\n\r\n    const MAX_TURNS = 20; // 최대 턴 수를 20턴으로 설정\r\n    let turn = 1;\r\n\r\n    // 로그 업데이트 함수를 별도로 정의\r\n    const updateBattleLog = (newEntry) => {\r\n      setBattleLog(prev => [...prev, newEntry]);\r\n    };\r\n\r\n    while (playerCards.some(card => card.hp > 0) && \r\n           enemyCards.some(card => card.hp > 0) && \r\n           turn <= MAX_TURNS) {\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n      // 턴 시작 로그\r\n      updateBattleLog({ \r\n        text: `${turn}턴 시작!`, \r\n        type: 'turn-start' \r\n      });\r\n\r\n      // 플레이어 파티의 공격\r\n      for (let i = 0; i < playerCards.length; i++) {\r\n        const attacker = playerCards[i];\r\n        if (attacker.hp > 0) {\r\n          const target = enemyCards.find(c => c.hp > 0);\r\n          if (target) {\r\n            setActiveAttacker({ card: attacker, isPlayer: true });\r\n            setActiveTarget({ card: target, isPlayer: false });\r\n\r\n            const damageInfo = calculateDamage(attacker, target);\r\n            target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n            updateBattleLog(createLogMessage(attacker, target, damageInfo, true));\r\n\r\n            if (target.hp <= 0) {\r\n              updateBattleLog({\r\n                text: `[적군] ${target.job}(${target.grade})가 쓰러졌습니다!`,\r\n                type: 'card-death'\r\n              });\r\n            }\r\n\r\n            await new Promise(resolve => setTimeout(resolve, 800));\r\n            setActiveAttacker(null);\r\n            setActiveTarget(null);\r\n            await new Promise(resolve => setTimeout(resolve, 200));\r\n          }\r\n        }\r\n      }\r\n\r\n      // 적 파티의 공격\r\n      for (let i = 0; i < enemyCards.length; i++) {\r\n        const attacker = enemyCards[i];\r\n        if (attacker.hp > 0) {\r\n          const target = playerCards.find(c => c.hp > 0);\r\n          if (target) {\r\n            setActiveAttacker({ card: attacker, isPlayer: false });\r\n            setActiveTarget({ card: target, isPlayer: true });\r\n\r\n            const damageInfo = calculateDamage(attacker, target);\r\n            target.hp = Math.max(0, target.hp - damageInfo.damage);\r\n\r\n            updateBattleLog(createLogMessage(attacker, target, damageInfo, false));\r\n\r\n            if (target.hp <= 0) {\r\n              updateBattleLog({\r\n                text: `[아군] ${target.job}(${target.grade})가 쓰러졌습니다!`,\r\n                type: 'card-death'\r\n              });\r\n            }\r\n\r\n            await new Promise(resolve => setTimeout(resolve, 800));\r\n            setActiveAttacker(null);\r\n            setActiveTarget(null);\r\n            await new Promise(resolve => setTimeout(resolve, 200));\r\n          }\r\n        }\r\n      }\r\n\r\n      if (turn === MAX_TURNS) {\r\n        updateBattleLog({ \r\n          text: `${MAX_TURNS}턴이 경과했습니다. 시간 초과로 패배!`, \r\n          type: 'time-over' \r\n        });\r\n        break;\r\n      }\r\n\r\n      setCurrentTurn(turn);\r\n      turn++;\r\n    }\r\n\r\n    // 전투 결과 처리 수정\r\n    const battleResult = {\r\n      playerWon: turn <= MAX_TURNS && playerCards.some(card => card.hp > 0),\r\n      deadCards: playerCards\r\n        .map((card, index) => ({ ...card, originalIndex: index }))\r\n        .filter(card => card.hp <= 0),\r\n      timeOver: turn > MAX_TURNS\r\n    };\r\n\r\n    updateBattleLog({ \r\n      text: battleResult.timeOver ? '시간 초과로 패배!' : \r\n            battleResult.playerWon ? '플레이어의 승리!' : '적의 패배!',\r\n      type: battleResult.timeOver ? 'time-over' : \r\n            battleResult.playerWon ? 'victory' : 'defeat'\r\n    });\r\n\r\n    setIsBattling(false);\r\n    onBattleEnd && onBattleEnd(battleResult);\r\n  };\r\n\r\n  return (\r\n    <div className=\"battle-container\">\r\n      <div className=\"battle-field\">\r\n        <div className=\"enemy-area\">\r\n          {enemyParty.map((card, index) => (\r\n            <Card \r\n              key={`enemy-${index}`} \r\n              {...card}\r\n              isActive={activeAttacker?.card === card || activeTarget?.card === card}\r\n              isAttacker={activeAttacker?.card === card}\r\n              isTarget={activeTarget?.card === card}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div className=\"player-area\">\r\n          {playerParty.map((card, index) => (\r\n            <Card \r\n              key={`player-${index}`} \r\n              {...card}\r\n              isActive={activeAttacker?.card === card || activeTarget?.card === card}\r\n              isAttacker={activeAttacker?.card === card}\r\n              isTarget={activeTarget?.card === card}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"battle-controls\">\r\n        <button \r\n          onClick={startBattle} \r\n          disabled={isBattling}\r\n          className=\"battle-button\"\r\n        >\r\n          전투 시작\r\n        </button>\r\n        <div className=\"turn-counter\">턴: {currentTurn}</div>\r\n      </div>\r\n\r\n      <div className=\"battle-log\" ref={logRef}>\r\n        {battleLog.map((log, index) => (\r\n          <div key={index} className={`log-entry ${log.type}`}>\r\n            {log.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// =========================================\r\n// 메인 App 컴포넌트\r\n// =========================================\r\nfunction App() {\r\n  // =========================================\r\n  // 상태 관리\r\n  // =========================================\r\n  const [my, setMy] = useState([]);\r\n  const [party, setParty] = useState([\r\n    { job: '전사', grade: 'SSR', isFlipped: false },\r\n    { job: '마법사', grade: 'SR', isFlipped: false },\r\n    { job: '궁수', grade: 'S', isFlipped: false },\r\n    { job: '전사', grade: 'R', isFlipped: false },\r\n    { job: '궁수', grade: 'H', isFlipped: false }\r\n  ]);\r\n  \r\n  // 적 파티 상태 추가 - 랜덤하게 생성\r\n  const [enemyParty] = useState(() => {\r\n    return Array(5).fill(null).map(() => ({\r\n      job: jobs[dice(0, 4)],\r\n      grade: grade[getLuck()],\r\n      isFlipped: false\r\n    }));\r\n  });\r\n  \r\n  const [isGachaAnimating, setIsGachaAnimating] = useState(false);\r\n\r\n  // =========================================\r\n  // 드래그 앤 드롭 핸들러\r\n  // =========================================\r\n  const handleDragStart = (e, sourceType, index) => {\r\n    e.dataTransfer.setData('text/plain', JSON.stringify({ type: sourceType, index }));\r\n  };\r\n\r\n  const handleDrop = (e, targetType, targetIndex = null) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n    \r\n    try {\r\n      const { type: sourceType, index: sourceIndex } = JSON.parse(e.dataTransfer.getData('text/plain'));\r\n      \r\n      // 파티에서 보유 카드함으로 드래그할 때\r\n      if (sourceType === 'party' && targetType === 'my') {\r\n        const movedCard = party[sourceIndex];\r\n        // 파티에서 제거\r\n        setParty(prev => prev.filter((_, idx) => idx !== sourceIndex));\r\n        // 보유 카드함에 추가\r\n        setMy(prev => [...prev, movedCard]);\r\n        return;\r\n      }\r\n\r\n      const sourceArray = sourceType === 'party' ? party : my;\r\n      const targetArray = targetType === 'party' ? party : my;\r\n      const setSourceArray = sourceType === 'party' ? setParty : setMy;\r\n      const setTargetArray = targetType === 'party' ? setParty : setMy;\r\n\r\n      // 파티 최대 인원 체크\r\n      if (targetType === 'party' && targetArray.length >= 5 && sourceType !== 'party') {\r\n        alert('파티 인원이 최대입니다.');\r\n        return;\r\n      }\r\n\r\n      // 드래그한 카드\r\n      const draggedCard = { ...sourceArray[sourceIndex] };\r\n\r\n      if (targetIndex !== null) {\r\n        // 카드 간 교체\r\n        if (sourceType === targetType) {\r\n          // 같은 영역 내 이동\r\n          const newArray = [...sourceArray];\r\n          [newArray[sourceIndex], newArray[targetIndex]] = [newArray[targetIndex], newArray[sourceIndex]];\r\n          setSourceArray(newArray);\r\n        } else {\r\n          // 다른 영역 간 이동\r\n          const newSourceArray = [...sourceArray];\r\n          const newTargetArray = [...targetArray];\r\n          \r\n          if (targetType === 'party') {\r\n            // 보유 카드에 파티로 이동\r\n            if (newTargetArray[targetIndex]) {\r\n              // 기존 파티 카드를 보유 카드로 이동\r\n              newSourceArray.push(newTargetArray[targetIndex]);\r\n            }\r\n            newTargetArray[targetIndex] = draggedCard;\r\n            newSourceArray.splice(sourceIndex, 1);\r\n          } else {\r\n            // 파티에서 보유 카드로 이동\r\n            newSourceArray[sourceIndex] = newTargetArray[targetIndex];\r\n            newTargetArray[targetIndex] = draggedCard;\r\n          }\r\n          \r\n          setSourceArray(newSourceArray);\r\n          setTargetArray(newTargetArray);\r\n        }\r\n      } else {\r\n        // 영역에 드롭\r\n        if (targetType === 'party' && targetArray.length < 5) {\r\n          const newSourceArray = [...sourceArray];\r\n          newSourceArray.splice(sourceIndex, 1);\r\n          setSourceArray(newSourceArray);\r\n          setTargetArray(prev => [...prev, draggedCard]);\r\n        } else if (targetType === 'my') {\r\n          const newSourceArray = [...sourceArray];\r\n          newSourceArray.splice(sourceIndex, 1);\r\n          setSourceArray(newSourceArray);\r\n          setTargetArray(prev => [...prev, draggedCard]);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('드래그 앤 드롭 처리 중 오류:', error);\r\n    }\r\n  };\r\n\r\n  // =========================================\r\n  // 가챠 시스템\r\n  // =========================================\r\n  const handleGacha = async (useApi = false) => {\r\n    setIsGachaAnimating(true);\r\n    \r\n    try {\r\n      let newCard;\r\n      if (useApi) {\r\n        const response = await axios.get('http://localhost:8080/spring/api/gacha');\r\n        newCard = response.data;\r\n      } else {\r\n        newCard = {\r\n          job: jobs[dice(0, 4)],\r\n          grade: grade[getLuck()]\r\n        };\r\n      }\r\n      \r\n      newCard.isFlipped = true;\r\n      setMy(prev => [...prev, newCard]);\r\n      \r\n      setTimeout(() => {\r\n        setMy(prev => prev.map((card, idx) => \r\n          idx === prev.length - 1 ? {...card, isFlipped: false} : card\r\n        ));\r\n      }, 500);\r\n      \r\n    } catch (error) {\r\n      console.error('가챠 실패:', error);\r\n      alert('카드 기에 실패했습니. 다시 시도해주세요.');\r\n    } finally {\r\n      setIsGachaAnimating(false);\r\n    }\r\n  };\r\n\r\n  // =========================================\r\n  // 카드 렌더링 헬퍼 함수\r\n  // =========================================\r\n\r\n  // 카드 렌더링 함수\r\n  const renderCards = (cards, type) => {\r\n    return cards.map((card, index) => (\r\n      <Card \r\n        key={`${type}-${index}`}\r\n        {...card}\r\n        onFlip={() => {\r\n          const setFunction = type === 'party' ? setParty : setMy;\r\n          setFunction(prev => prev.map((c, idx) => \r\n            idx === index ? {...c, isFlipped: !c.isFlipped} : c\r\n          ));\r\n        }}\r\n        draggable={true}\r\n        onDragStart={(e) => handleDragStart(e, type, index)}\r\n        onDragOver={(e) => e.preventDefault()}\r\n        onDrop={(e) => handleDrop(e, type, index)}\r\n        index={index}\r\n      />\r\n    ));\r\n  };\r\n\r\n  // 등급별 정렬 순서 정의\r\n  const gradeOrder = {\r\n    'SSR': 0,\r\n    'SR': 1,\r\n    'S': 2,\r\n    'R': 3,\r\n    'H': 4,\r\n    'N': 5\r\n  };\r\n\r\n  // 카드 그룹화 및 정렬 함수\r\n  const groupCards = (cards) => {\r\n    // 1. 카드 그룹화\r\n    const grouped = cards.reduce((acc, card) => {\r\n      const key = `${card.job}-${card.grade}`;\r\n      if (!acc[key]) {\r\n        acc[key] = { ...card, count: 1 };\r\n      } else {\r\n        acc[key].count++;\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    // 2. 그룹화된 카드를 배열로 변환하고 정렬\r\n    return Object.entries(grouped)\r\n      .map(([key, card]) => card)\r\n      .sort((a, b) => {\r\n        // 먼저 등급으로 정렬\r\n        const gradeCompare = gradeOrder[a.grade] - gradeOrder[b.grade];\r\n        \r\n        // 등급이 같으면 직업명으로 정렬\r\n        if (gradeCompare === 0) {\r\n          return a.job.localeCompare(b.job);\r\n        }\r\n        \r\n        return gradeCompare;\r\n      });\r\n  };\r\n\r\n  // 그룹화된 카드 렌더링 함수\r\n  const renderGroupedCards = () => {\r\n    const sortedGroupedCards = groupCards(my);\r\n    return sortedGroupedCards.map((card, index) => {\r\n      const originalIndex = my.findIndex(c => c.job === card.job && c.grade === card.grade);\r\n      \r\n      return (\r\n        <div key={`grouped-${card.job}-${card.grade}`} className=\"grouped-card\">\r\n          <Card \r\n            job={card.job} \r\n            grade={card.grade}\r\n            isFlipped={card.isFlipped}\r\n            onFlip={() => {\r\n              setMy(prev => prev.map((c, idx) => \r\n                idx === originalIndex ? {...c, isFlipped: !c.isFlipped} : c\r\n              ));\r\n            }}\r\n            draggable={true}\r\n            onDragStart={(e) => handleDragStart(e, 'my', originalIndex)}\r\n            onDragOver={(e) => e.preventDefault()}\r\n            onDrop={(e) => handleDrop(e, 'my', originalIndex)}\r\n          />\r\n          {card.count > 1 && (\r\n            <div className=\"card-count\">\r\n              x{card.count}\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  // 전투 결과 처리 함수 수정\r\n  const handleBattleEnd = (battleResult) => {\r\n    if (battleResult.deadCards.length > 0) {\r\n      // 파티의 원래 상태를 유지하면서 죽은 카드들의 HP만 리셋\r\n      setParty(prev => prev.map(card => {\r\n        const deadCard = battleResult.deadCards.find((dead, index) => \r\n          dead.job === card.job && dead.grade === card.grade\r\n        );\r\n        \r\n        if (deadCard) {\r\n          // 죽은 카드를 리셋하여 파티에 유지\r\n          return {\r\n            ...card,\r\n            isFlipped: false\r\n          };\r\n        }\r\n        return card;\r\n      }));\r\n    }\r\n  };\r\n\r\n  // =========================================\r\n  // 렌더링\r\n  // =========================================\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"gacha-area\">\r\n        <h2>가챠</h2>\r\n        <button \r\n          onClick={() => handleGacha(false)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          로컬 가챠\r\n        </button>\r\n        <button \r\n          onClick={() => handleGacha(true)} \r\n          disabled={isGachaAnimating}\r\n          className={`gacha-button ${isGachaAnimating ? 'animating' : ''}`}\r\n        >\r\n          API 가챠\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"battle-area\">\r\n        <h2>파티 1</h2>\r\n        <CardArea \r\n          type=\"party\" \r\n          handleDrop={handleDrop}\r\n        >\r\n          {renderCards(party, 'party')}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"inventory\">\r\n        <h2>보유 카드</h2>\r\n        <CardArea \r\n          type=\"my\"\r\n          handleDrop={handleDrop}  // handleDrop 함수 전달\r\n        >\r\n          {renderGroupedCards()}\r\n        </CardArea>\r\n      </div>\r\n\r\n      <div className=\"battle-section\">\r\n        <h2>전투</h2>\r\n        <Battle \r\n          playerParty={party} \r\n          enemyParty={enemyParty} \r\n          onBattleEnd={handleBattleEnd}  // 전투 결과 처리 함수 전달\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}